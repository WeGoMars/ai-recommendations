
[페이지 1]
2장      AlAgent 기반 시스템 설계하기
A. 프로젝트 요구사항 정의하기

ㅣ. SABA ANAM] HA 기능 정의

2 =                                    ii. AlAgent 아키텍처 이해하기
목차

8. ㄴ8090080을 활용한 시파이프라인 구축

1. LangChain 기본 개념 이해하기
1장     기초 및 개념

|. 체인과프롬프트 템플릿 활용하기
A. 들어가는 말

ii, 순차적 처리 파이프라인 설계하기
i. UB) 개발자가시로 구축하는 프로젝트의 가능성

iv. 실제 BOO LangChain 활용법
i, A 주식분석 시스템인가?

자          |       A
ii, 이 책에서 다루는 내용과 도구 소개                                               3장 주식분석 시스템 구즉

8. ADE 프로젝트 이해하기                                                            A 외부 APHES EI

.       뉴스       ! 뉴스 IMEI
ㅣ 시의 역할과 한계 이해하기                                            Ｌ 네이버 뉴스 APE 최신 뉴스 AAS

li. Yahoo Finance API= 주식 데이터 수집하기
[참고 효과적인 데이터 수집 프롬프트 작성법

i, 대형 언어 모델이 가진 능력

ii, 시를 활용한 프로그래밍접근 방식
ii, APIS 프롬프트로 코드 생성하기
. 주식분석 기초 개념
iv. 2) 처리와안정성확보하기
i BL 데이터 유형 이해하기

i, 기술적 분석과 감성적 분석

ii, 재무 MHS 기본 이해


--------------------------------------------------

[페이지 2]
8. 감성 분석 모듈 구현
1. 뉴스 데이터 전처리하기
i. UM 위한 감성 분석 프롬프트 설계
ii, 감성 분석 결과 해석 및 활용하기
0. 재무 분석 모듈 구현
ㅣ 재무 데이터 구조화하기
i, 산업 평균 데이터 활용하기
ii, US 분석을 위한 효과적인 프롬프트 템플릿
4장     웹 인터페이스 개발
A. Flask#] 서버 구축하기
1. AINA 웹 서버 개발 요청하가 효과적인 프롬프트 전략
i, _ 씨미엔드포인트 설계 및 구현
ii, 에러처리와사용자피드백 설계
iv. 실제 ASE apppy 코드 해부

[참괴 UUX 디자인을 위한 프롬프트 작성법

8. HTML/CSS 템플릿 구현
1. Flask 템플릿 시스템 활용하기
|. 주식 분석 결과 BAB 위한 [11\/Ｌ구조 설계
fii, 사용자 ASA! 인터페이스 구현하기
iv. 실제 index.html 파일 구조 분석
6. 비동기 데이터 처리 구현
1. Javascript 활용한 비동기 요청 처리
|. 분석 진행 상태 표시 기능 구현
ii, 분석 결과의 동적 렌더링 방법
5장     시스템 배포 및 운영
A. 실제 환경에 배포하기

6장      마무리하며...


--------------------------------------------------

[페이지 3]
1장 기초 및 개념

A. 들어가는 말

1. 비 개발자가 시로 구축하는 프로젝트의 가능성

소프트웨어 개발은 오랫동안 특별한 기술을 가진 사람들만의 영역이였습니다. 복잡한
프로그래밍언어, 복잡한 개발 환경 설정, 서버 관리 등 진입장벽이 높아 많은 아이디어가
있음에도 불구하고 그 아이디어가 실현되지 못하고 머릿속에만 머물러 있었습니다.
하지만 인공지능의 발전, 특히 대형 언어 모델(Ｌ\/)의 등장으로 이러한 SSS 변화하고
있습니다. 오늘날 우리는 코딩 경험이 적거나 전무한 사람도 시의 도움을 받아 복잡한
소프트웨어 시스템을 구축할 수 있는 새로운 시대에 살고 있습니다. 이 책에서 다루는
주식 종목 분석 시스템은 그러한 가능성을 보여주는 대표적인 사례입니다.

프로그래밍 지식 없이 어떻게 웹 어플리케이션을 만들 수 있을까요? 그 답은 대형 언어
모델이 작동하는 SAO 있습니다. 요즘 공개되어있는 ChatGPT, Claude, gemini} 같은
대형 LMS 이용한 시는 단순한 HO 아닌, 수십억 개의 텍스트와 ACS 학습한
강력한 시스템입니다. 이러한 UMAIABS BES 이해하고 생성 및 수정뿐만 아니라,
문제 해결과정을 안내하고 개발 중에 발생하는 CFS 디버깅하는데 도움을 B+
있습니다. 이러한 도움을 통해 당신이 시스템의 목적과 기능을 설명하면, 시에서는 그것을
실현하기 위한 기술적 세부사항을 처리합니다. 이러한 과정에서 발생하는 문제에
대해서도 해결책을 제시합니다.

이러한 시시스템의 능력을 활용할 수 있는 프로젝트는 무궁무진합니다. 개인 블로그,
전자상거래사이트, 데이터 시각화 도구 등 다양한 애플리케이션을 구축할 수 있습니다.
그중에서도 이 책에서는 특별히 주식분석시스템을 예시로 선택했습니다.

2. 왜 주식분석 시스템인가

주식시장 분석은 대량의 데이터 처리, 복잡한 알고리즘, 그리고 다양한 정보 소스의
통합을 필요로 하는 영역입니다. 전통적으로 이런 시스템은 금융기관이나 기술회사에서
대규모 개발팀을 통해 구축합니다. 하지만 이제 개인 투자자나 소규모 팀도 아이디어만

있다면 alo] ESOS 유사한 기능을 AE 시스템을 만들 수 있습니다.

시기반 개발은 단순히 개발 작업을 대체하는 것이 아니라, 창작의 새로운 패러다임을
제시합니다. 여기서 중요한 것은 코드 작성 능력이 아니라, 원하는 결과를 얻기 위해 시와
효과적으로 소통하는 능력입니다.

이러한 접근방식은 다음과 같은 장점이 있습니다.

1. 프로그래밍 언어나 개발 환경에 대한 사전 지식 없이도 시작할 수 있습니다.

2. 아이디어에서 작동하는 프로토타입까지의 시간을 대폭 단출할 수 있습니다.

3. 이러한 과정에서 자연스럽게 개발 개념과 기술을 학습할 수 있습니다.

4. 기술적 제약에 덜 Aho 더 창의적인 솔루션에 집중할 수 있습니다.


--------------------------------------------------

[페이지 4]
3. 이 책에서 다루는 내용 소개

이 책은 단순한 기술 안내서가 아닙니다. 이는 저자와 같은 비개발자가 ALS 활용하여
복잡한 시스템을 구축하는 HSS 안내하는 로드맵입니다. Pele LangChain

프레임워크를 사용하여 실제 작동하는 주식분석 시스템을 처음부터 끝까지 함께 만들어
볼 것입니다.

이 여정을 통해 당신은 다음을 배우게 될 것입니다.
- AIS 효과적으로 협업하는 방법
- 복잡한 시스템을 관리 가능한 구성요소로 나누는 방법
- 데이터 수집 및 분석 파이프라인 7S 방법
- BAH 설정 및 애플리케이션 배포 방법
- 문제가 발생했을 때 해결하는 방법

중요한 것은 이 모든 과정에서 당신이 코드의 모든 측면을 이해할 Wart 없다는
점입니다. (물론 전반적인 코드의 이해는 필요합니다) 마치 건축가가 건물의 모든 전기
배선과 배관을 직접 설치할 필요가 없는 것처럼, 당신은 시스템의 비전을 제시하고 시가
세부사항을 처리하도록 할 수 있습니다.

이제 시와 함께하는 개발의 MAS 첫 발을 WS 준비가 되셨나요? 주식분석시스템을
구축하는 여정을 시작하겠습니다.

8. 시기반 프로젝트 이해하기

1. 시의 역할과 한계 이해하기

인공지능(41), 특히 대형 언어모델(Ｌ\/)은 소프트웨어 개발방식을 혁신적으로 변화시키고
있습니다.

전통적 개발 방식과 시를 이용한 개발 방식 비교

그림 1 개발 방식 비교(코드작성자 vs 의도 전달자)


--------------------------------------------------

[페이지 5]
하지만, 시가 뭐든지 할 수 있는 마법 지팡이는 아닙니다. 비개발자로서 시와 함께                       코드 이해와 생성

성공적인 프로젝트를 수행하기 위해서는 시의 강점과 HAS 명확히 이해하는 것이                    LMe 다양한 프로그래밍 ANS 작성된 코드를 이해하고 생성할 수 있습니다. 특히

Claude2| 최신 2A Python, JavaScript, HTML, (55와 같은 웹 개발 언어에 능숙합니다.

이들은 단순한 함수부터 복잡한 클래스와 애플리케이션 구조까지 생성할 수 있습니다.

자연어 설명으로 기능적인 코드 생성 가능        항상 100% 정확한 ACS 생성하지 않음

아이디어부터 프로토타입까지 단축 가능          대화 맥락 외의 전체 시스템 구조 이해 불가
오류메시지 분석 및 해결책 제안 가능           비즈니스 가치나 사용자 경험 관련 판단 부족                     ClaudeAl “주식데이터를 가져와서 이동평균을 계산하는 YES 만들어주세요" 라고

다양한 프로그래밍 언어, 라이브러리 지식 보유     실행 환경에 직접 접근하여 문제 진단 불가                     요청하면 다음과 같이 코드를 생성해줍니다.
즉각적 피드백                              모든 보안 취약점을 예상하지 못할 수 있음

import 0200      0
문서화                                  학습 데이터 이후 최신 기술 지식 부족                          
import pandas

import yfinance as yf

이러한 강점과 한계를 이해함으로써, Alo] 강점을 최대한 활용하고 한계를 인식하면
프로젝트 계획과 실행과정에서 현실적인 기대치를 설정하고 더 나은 결과를 얻을 수
있습니다.

def fetch_stock_data_with_moving_average(ticker, start_date, end_date, ma_period=20):
# 주식 데이터 가져오기

stock_data = yf.download(ticker, start=start_date, end=end_date)

# 이동평균 계산

2. 대형 언어 모델이 가진 능력                                                     stock_data[f'MA_{ma_period}'] =
stock_data['Close’].rolling(window=ma_period).mean()
대형 언어 모델은 텍스트 생성 이상의 SAS 가지고 있습니다. 여기서는 Claudette

대형 언어 모델의 핵심 능력을 살펴보겠습니다.
return stock_data


--------------------------------------------------

[페이지 6]
맥락 이해와 적응

LMS 대화의 맥락을 이해하고 그에 맞게 응답을 조정할 수 있습니다. 이는 프로젝트
요구사항이 변경되거나 새로운 기능이 추가될 때 특히 유용합니다. 이전 대화를 참조하여
현재 요청에 적합한 BOS 생성할 수 있습니다.

오류분석 및 문제해결
UM2 코드에서 발생하는 오류를 분석하고, 가능한 원인과 해결책을 WANS 수
있습니다. 이는 디버깅 과정에서 특히 비개발자에게 큰 도움이 됩니다.

다양한 분야의 지식 연결 가능
UME 다양한 분야의 지식을 연결할 수 있습니다. 주식분석 시스템의 경우, 금융데이터
분석, 웹개발 등 여러 영역의 지식을 통합하여 솔루션을 제시할 수 있습니다.

프로젝트를 효과적으로 진행하기 위한 협업적 접근 방식을 살펴보겠습니다.

3. 시를 활용한 프로그래밍 접근 방식

Alt 함께 개발프로젝트를 진행할 때는 새로운 접근 방식이 필요합니다. 시와의 효과적인
협업을 위한 주요 원칙들을 살펴보겠습니다.

명확한 목표설정

시에게 프로젝트의 SHA 요구사항을 최대한 명확하게 설명하는 것이 중요합니다.
목표가 명확할수록 시가 제공하는 솔루션도 명확해집니다.

EX) 효과적인 예 vs 비효과적인 예

효과적인 Of: "주식 데이터를 가져와서 이동평균을 계산하고, 그 결과를 웹페이지에
AES 표시하는 애플리케이션이 필요합니다. ASAE 종목 DOM 기간을 입력할 수
있어야 합니다"

비효과적인 of: "주식 관련 웹 AS 만들고 싶어요"

단계적 접근

한 번에 해결하려 하지 말고, 작은 단계로 나누어 접근하세요. 4

는
단계를 성공적으로 완료한 후 다음 단계로 진행하는 것이 효과적입니다.
예를 들어 주식분석 시스템을 다음과 같은 단계로 나눌 수 있습니다.
A 주식 데이터를 가져오는 기본 기능 구현

8. 데이터 분석 및 지표 계산 기능 추가


--------------------------------------------------

[페이지 7]
Cc 웹 인터페이스 설계 및 구현
D. 사용자 입력 처리 기능 추가

6. 서버 배포 및 설정

프롬프트 엔지니어링

시와 효과적으로 소통하는 방법을 "프롬프트 엔지니어링"이라고 합니다. 이는 시에게
정확히 무엇을 원하는지 명확하게 전달하는 기술입니다.

효과적인 프롬프트의 요소:
- 구체적인 요구사항 : 필요한 기능, 입력, SHB 명확히 설명
- 맥락 제공: 프로젝트의 배경과 목적을 설명
- 제약 조건 명시 : 사용해야 하는 특정 라이브러리나 접근 Bajo] 있다면 언급

- 예시포함: 가능하다면 원하는 결과의 예시를 제공

반복적 개선

시와의 BAS 일회성이 아닌 반복적 과정입니다. A 번째 결과가 완벽하지 않더라도,
피드백을 계속적으로 제공하고 개선을 요청해야 합니다.

검증과 이해

시가 생성한 코드는 SS 검증이 필요합니다. 코드가 OSHS 작동하는지 확인하고,
가능한 범위에서 코드의 핵심 개념을 이해하려고 노력하세요. 이는 향후 문제 해결에 큰
도움이 됩니다. 코드에 대한 기본적인 개념이 없다 하더라도 걱정하지 마세요. 시에게
ASS 각 부분이 FAB 하는지 설명해 달라고 요청하는 것도 좋은 방법입니다. 이를
통해 코드에 대한 OSS 높일 수 있습니다.

<. 주식분석 기초 개념

주식시장에서 성공적인 투자 결정을 내리기 위해서는 다양한 데이터를 분석하고
해석하는 능력이 필요합니다. 이번 장에서는 시기반 주식분석 시스템을 구축하기 위해
필요한 주식분석의 기본 개념을 다루겠습니다.

1. 필요한 데이터 유형 이해하기

주식 분석을 위해서는 다양한 유형의 데이터가 필요합니다. 투자 결정은 정확하고
다양한 데이터에 기반할 때 더 효과적입니다. 이번 장에서는 시기반 주식분석 시스템에서
실제로 사용되는 데이터 유형과 그 수집 방법에 대해 자세히 알아보겠습니다.

시장데이터
시장데이터는 주식의 가격, 거래량, 변동성 등 시장에서의 주식 움직임과 관련된 Ses
포함합니다. 이 데이터는 주식의 현재 가치와 시장인식을 파악하는 기본적인 지표로,


--------------------------------------------------

[페이지 8]
기술적 분석의 핵심 요소입니다. 시장데이터는 단기적인 가격 변동과 SAS 파악하는데
중요하며, 투자 시점 결정에 결정적인 역할을 합니다.

주가정보

주가 정보는 주식의 가격과 관련된 모든 데이터를 의미합니다. 현재가는 현재 시장에서
거래되는 FA 가격이며, 시가총액은 발행된 모든 주식의 총 가치로 기업의 규모를
LEHALICH 52주 최고/최저가는 과거 1년동안의 주가 범위를 보여주어 주가의 변동폭과
현재 위치를 파악하는데 도움이 됩니다.

이 주식분석 시스템에서 주가정보는 10366 라이브러리를 사용하여 수집합니다.

거래량 및 변동성

거래량은 특정 기간 동안 거래된 주식의 수량으로, 시장의 활동성과 유동성을 보여주는
지표입니다. 거래량이 많을수록 주가 움직임의 신뢰성이 높아지며, 주가 변동이 있을 때
거래량의 SAS 추세의 강도를 판단하는데 중요합니다.

변동성은 주가가 얼마나 급격하게 변동하는지를 나타내는 지표로, 위험과 수익 가능성을
동시에 보여줍니다. 높은 변동성은 단기간에 큰 수익을 얻을 가능성이 있지만, 그만큼

손실 위험도 크다는 것을 의미합니다. 변동성은 주로 주가 변화율의 표준편차로 측정되며,

연간화하여 표시합니다.

주식의 거래량과 변동성은 과거 주가 데이터를 기반으로 계산됩니다.

재무데이터
재무데이터는 기업의 재무 상태와 성과를 나타내는 지표로, 기업의 재무제표에서
추출합니다. 이는 기업의 내재 가치를 평가하는 기본적 분석의 핵심 요소입니다.

무데이터는 기업의 수익성, 안정성, 성장성, 효율성 등을 종합적으로 판단할 수 있는
근거를 제공하며, 장기 투자 결정에 중요한 기준이 됩니다.

재무재표 데이터 수집
재무제표는 기업의 재무 상태와 경영 AMS 보여주는 공식 문서입니다. 주요
재무제표에는 다음이 포함됩니다.
- 대차대조표: 특정 시점의 자산, 부채, 자본을 보여주는 정적
보고서입니다.기업이 보유한 자원(자산)과 그 조달 방법(부채와 자본)을
나타냄니다.
- 손익계산서: 일정 기간 동안의 수익, 비용, 이익을 보여주는 동적 보고서입니다.
기업의 수익성과 영업효율성을 평가하는데 중요합니다.
- 현금흐름표: 일정 기간 동안의 현금 유입과 유출을 보여주는 보고서입니다.
기업의 유동성과 자금 관리 능력을 평가하는 기준이 됩니다.

이 주식분석 시스템에서 재무제표 데이터는 10366 라이브러리를 사용하여 수집합니다.


--------------------------------------------------

[페이지 9]
뉴스 및 공시 데이터

뉴스와 공시 데이터는 기업의 최신 동향과 이벤트를 파악하는데 중요합니다. 이러한
정보는 기업의 현재 상황과 미래 전망에 대한 시의성 있는 통찰력을 제공하며, 종종
주가에 즉각적인 영향을 미칩니다. 재무제표가 과거 성과를 반영하는 반면, 뉴스와
현재 진행 중인 변화와 미래 방향성을 파악하는데 도움이 됩니다.

애

시는

뉴스데이터 수집

뉴스데이터는 기업 관련 최신 소식, 시장 동향, 산업 변화 등에 대한 정보를 포함합니다.
이는 기업의 공식 발표 외에도 시장 참여자들의 반응과 전문가 의견 등을 파악할 수 있는
중요한 소스입니다. 뉴스는 새로운 제품출시, 경영진 변경, 규제문제, 경쟁환경 변화 등
중요한 정보를 제공합니다.

이 주식분석 시스템에서 야후 파이낸스 및 구글 뉴스에서 특정 기업과 관련된 뉴스

기사를 검색하고 수집합니다.

재무 건전성 평가 데이터

수집된 재무 데이터를 바탕으로 기업의 건전성을 평가합니다. 재무 건전성은 기업이
일상적인 SSR 지속하고, 부채를 상환하며, 위기 상황에 대응할 수 있는 능력을

의미합니다. 재무적으로 건전한 기업은 경기 SAL 산업위기와 같은 어려운 시기에도
생존하고 회복할 가능성이 높아 장기 투자자에게 중요한 고려 사항입니다.

유동성은 기업이 단기 부채를 상환할 수 있는 능력을 HEHUCL 유동성이 높은 기업은
현금 흐름 문제가 적고 단기적인 재무 위기에 더 잘 대응할 수 있습니다. 주요 유동성

지표로는 유동비율, 당좌비율, 현금비율 등이 있으며, 그 중 유동비율이 가장 기본적인
지표입니다.

기업의 유동비율이 2이상인 경우 매우 우수한 단기 재무 안정성을 갖추고 있다고

평가하며, 1미만인 경우 단기 부채 Seto] 어려움이 있을 수 RASS 의미합니다.

산업 평균 비교 데이터

기업의 재무 지표를 산업 평균과 비교하기 위한 데이터도 포함됩니다. 이 비교 데이터는
기업의 성과를 상대적으로 평가하는데 중요합니다. 같은 재무 비율이라도 산업마다 적정
수준이 다를 수 있기 때문에, 산업 평균과의 비교는 해당 기업의 경쟁력과 위치를 더
정확히 파악하는데 도움이 됩니다.

2. 기술적 분석과 감성적 분석

기술적 분석

기술적 분석은 주가의 과거 SAAB 통계적으로 연구하여 미래 가격 변동을 예측하는
방법입니다. 이 방법은 주로 차트패턴, 가격추세, 거래량 변화 등을 분석합니다.


--------------------------------------------------

[페이지 10]
이 책의 주식분석 시스템은 기술적 지표를 활용하지만, 직접적인 계산보다는 주식
데이터 수집과 SAU 중점을 두고 있습니다. 실제 코드에서는 1103066 라이브러리를
통해 주가 데이터를 가져오고, 이를 바탕으로 [\/이 분석을 수행하는 BAS 사용합니다.

감성적 분석

감성적 분석은 뉴스기사, 소셜 미디어 포스트, 애널리스트 보고서 등 텍스트 데이터를
분석하여 시장과 특정 주식에 대한 투자자들의 감정이나 의견을 파악하는 방법입니다. 이
분석 방법은 시장 심리가 주가에 미치는 영향에 초점을 맞춤니다.

감성적 분석의 방법으로는 세가지가 있습니다.

- 자연어 처리0410): 텍스트 데이터를 컴퓨터가 이해할 수 있는 형태로
처리합니다.

- 감성 점수화: 텍스트에 담긴 긍정적/부정적 감성을 수치화합니다.
- 키워드 트렌드 분석: 특정 키워드의 등장 빈도와 맥락을 분석합니다.

이 책의 주식분석 시스템에서는 네이버 APIS 활용해 최신 FAS 수집하고, 이를
분석하는 방식을 사용합니다.

3. 재무 재표의 기본 이해

주식 투자를 위한 기업 가치 평가에 있어 재무 재표는 가장 기본적이면서도 핵심적인

자료입니다. 재무 재표는 기업의 재무 상태와 경영 성과를 보여주는 공식 문서로,

투자자에게 기업의 객관적인 가치를 판단할 수 있는 근거를 제공합니다. 이번 장에서는
재무 재표의 종류와 각 항목이 어떤 의미를 가지는지, 그리고 우리의 주식분석
시스템에서 이를 어떻게 활용하는지 살펴보겠습니다.

재무제표의 종류

재무 재표는 크게 세 가지 종류로 나눌 수 있습니다. 대차대조표, 손익계산서,
현금흐름표입니다. 각각의 재표는 기업의 재무 상태를 다른 관점에서 보여주며, 이를
종합적으로 분석할 때 기업의 전체적인 재무 건전성을 파악할 수 있습니다.

- 대차대조표: 대차대조표는 특정 시점의 기업 자산, 부채, 자본을 보여주는
재무제표입니다. 이는 기업이 보유한 자원과 그 자원의 조달 SAS
나타냄니다. 우리의 주식분석 시스템에서는 대차대조표를 기반으로 하는
유동비율과 부채비율을 계산합니다. 이러한 비율은 기업의 재무 안정성을
평가하는 중요한 지표입니다.

- 손익계산서: 손익계산서는 일정 기간 동안의 기업 수익, 비용, 이익을 보여주는
재무제표입니다. 이는 기업의 수익성과 영업 효율성을 평가하는 데 중요합니다.
우리의 주식분석 시스템에서는 손익계산서 데이터를 기반으로 하는 순이익률과

가수익비율을 계산합니다. 이러한 지표들은 기업의 수익성과 주가평가 FES

주
판단하는데 중요한 지표입니다.


--------------------------------------------------

[페이지 11]
- 현금흐름표: 현금흐름표는 일정 기간 동안의 현금 유입과 gee 보여주는
재무제표입니다. 이는 기업의 유동성과 자금 관리 능력을 평가하는데
중요합니다. 우리의 주식분석 시스템에서는 현금흐름 데이터를 직접적으로

사용하지는 않지만, 배당수익률과 같은 관련 지표를 활용합니다.

재무 재표 분석의 중요성
재무 재표를 분석하는 것은 다음과 같은 이유로 중요합니다.
- 객관적인 평가 기준: 재무재표는 법적으로 규정된 형식에 따라 작성되며, 외부
감사를 받기 때문에 비교적 객관적인 정보를 제공합니다.
- 시계열 분석 가능: 여러 기간의 재무 재표를 비교함으로써 기업의 성장성,
안정성, 수익성 등의 추세를 파악할 수 있습니다.
- 동종 업계 비교 가능: 같은 산업 내 다른 기업들의 재무 재표와 비교함으로써
해당 기엽의 상대적 위치를 평가할 수 있습니다.

재무 재표와 투자 결정

재무 ME 분석은 투자 결정에 있어 기본이 되는 과정입니다. 그러나 이것만으로는
투자 결정을 내리기 어렵습니다. 재무 WHE 과거의 성과를 보여주는 반면, 투자는
미래에 대한 예측이 필요하기 때문입니다.

재무 재표는 기업의 재무 상태와 경영 성과를 객관적으로 보여주는 자료입니다. 주요
재무 MHS 종합적으로 분석함으로써, 기업의 건전성, 수익성 SB 평가할 수 있습니다.
이 책에서 구현할 시기반 주식분석 시스템은 이러한 재무 WH 데이터를 자동으로
수집하고 분석하여, 투자자에게 유용한 정보를 제공합니다. 또한 재무 WH 분석의 tas
보완하기 위해 뉴스 데이터를 함께 활용함으로써, 과거의 성과와 미래의 전망을 고려한
종합적인 투자 판단을 지원합니다.

다음 장에서는 이러한 기초 개념들을 바탕으로, 실제로 시기반 SABA 시스템을

설계하고 구현하는 방법에 대해 살펴보겠습니다.

oo


--------------------------------------------------

[페이지 12]
2장 Al 에이전트 기반 시스템 설계하기

A. 프로젝트 요구사항 정의하기

성공적인 소프트웨어 프로젝트의 A 번째 단계는 명확한 요구사항을 정의하는
것입니다. 요구사항 이란 시스템이 수행해야 할 기능과 충족해야 할 조건을 의미합니다.
특히 시를 활용한 프로젝트에서는 요구사항을 명확히 정의하는 것이 더욱 중요합니다.
정확하게 전달하지 SB 경우 시의 답변은 천차만별로 달라질 수 있기 때문입니다.

저자의 경우 주식분석 시스템을 만들기 위한 첫 프롬프트는 다음과 같이 작성했습니다.

시를 이용해서 주식분석 시스템을 만들고 싶습니다.
이 주식분석 시스템은 다음과 같은 주요 기능이 필요합니다.

1. 입력받은 종목에 대한 최근 뉴스기사 취합 및 요약

2. 취합한 종목 뉴스의 긍정, 부정을 판단

3. 입력받은 종목에 대한 재무 WE 분석하여 재무건전성을 판단
이 주식분석 시스템의 설치 OSE Ubuntu 이용하며, 개발 언어는 0/4100으로 만
생각입니다.
이 주식분석 시스템의 목적은 실제 데이터와 시분석을 활용하여 투자자들이 더 나은
결정을 내릴 수 있도록 하는 것입니다.

이런식으로 주식분석 시스템이 해야 할 3가지 역할을 FAIA 취합 및 요약, 취합한
뉴스의 긍정/부정 판단, MEME 분석과 같이 명확하게 작성해보았습니다.

이러한 요구사항을 바탕으로, 이제 주식분석 시스템의 핵심 기능에 대한 구체적인
정의와 구현 방법을 살펴보겠습니다.

1. 주식분석 시스템의 핵심 기능 정의
뉴스 수집 및 요약 기능

투자 결정에 있어 최신 뉴스는 매우 중요한 정보입니다. 기업과 관련된 뉴스를 수집하고

핵심 내용을 요약하는 기능은 투자자들이 빠르게 시장 상황을 파악하는데 도움을 줍니다.

뉴스 수집 및 요약을 위한 프롬프트는 다음과 같이 작성했습니다.

네이버 뉴스 APIS 사용하여 특정 회사명을 매개변수로 입력받아 최신 FAS 수집하는

Python 함수를 만들어 주세요.

시에게 위 프롬프트를 사용했더니 다음과 같은 소스를 만들어 보여줬습니다.

# final-stock-analyzerpyAlM| 뉴스 수집 함수

def fetch_stock_news(query):
""네이버 검색 APIS 사용하여 주식 관련 최신 FAS 검색합니다."""
# 네이버 API 인증 정보
client_id = os.environ.get("NAVER_CLIENT_ID", "사용자 클라이언트 1D")

client_secret = os.environ.get("NAVER_CLIENT_SECRET", "사용자 클라이언트 Pw")

# 결과 저장 리스트


--------------------------------------------------

[페이지 13]

try:

print(f"4]O|] APIS ‘{query} 관련 FAS AMSUCh..”)

뉴스 요약을 위한 프롬프트는 다음과 같이 작성했습니다.

LangChain 프레임워크를 사용하여 뉴스 요약을 위한 프롬프트 템플릿을
템플릿에 대한 요구사항은 다음과 같습니다.
1. 회사명과 뉴스 데이터를 입력변수로 사용할 것
2. 입력된 뉴스 목록을 종합하여 회사의 최신 동향을 요약할 것
3. 한국어로 응답할 것
4. 명확하고 객관적인 요약 생성
# 뉴스 분석 프롬프트 정의
news_analysis_prompt = PromptTemplate(
input_variables=("company_name", "news_data'],
template="""

{company_name}Ol] 대한 최신 FAS 분석해주세요.

아래는 {company_name}O] 대한 최신 뉴스 목록입니다:

{news_data}

do

뉴스들을 종합하여 (company_name}2| 최신 SAB 간략히 요약해주세요.
반드시 한국어(한글)로 답변해주세요.

)

# 뉴스 분석 실행 부분

news_result = news_analysis_chain.invoke({
“company_name": company_name,
“news_data": json.dumps(news_data, ensure_ascii=False)

))

news_summary = news_result["text"]

뉴스 감성 분석 기능

뉴스 기사의 USO] 해당 기업에 긍정/부정/중립적 인지를 분석하는 것은 주가 방향을
예측하는데 중요한 단서가 됩니다. 감성 분석 기능은 기업 관련 뉴스의 전반적인 Ade

평가하고, 이것이 주가에 미칠 SHS 예측합니다.

뉴스기사에 대한 감성 분석에 대한 프롬프트는 다음과 같이 작성했습니다.

수집한 뉴스에 대한 ASB 분석해주세요. [3090087을 통해 기능을 구현해야 하며
음 기능을 구현해야 합니다:
1. 회사명과 뉴스 요약을 입력 변수로 사용

2. 입력된 뉴스 요약의 감성(긍정/부정/중립)을 분석하도록 지시

3. 주가에 미칠 잠재적 영향을 예측하도록 QB


--------------------------------------------------

[페이지 14]
4. 다음 구조화된 형식으로 출력하도록 지정:
- 전반적 감성: [긍정/부정/중립]
- 감성 분석 근거: [근거 설명]
- 예상 주가 영향:[상승/하락/유지 전망과 이유]

5. 한국어로 응답하도록 명시

위와 같은 프롬프트를 통한 시의 출력은 다음과 같습니다.

# 감성 분석 프롬프트 정의

sentiment_analysis_prompt = PromptTemplate(
input_variables=["company_name", "news_summary"],
template="""
다음은 {company_name}Ol] 관한 FA 요약입니다:

{news_summary}

위 내용의 감성(긍정/부정)을 분석하고, 주가에 미칠 SFB 평가해주세요.

다음 형식으로 한국어(한글)로 답변해주세요:

1. 전반적 감성: [긍정/부정/중립]
2. 감성 분석 근거:[뉴스에서 발견된 긍정적/부정적 요소]
3. 예상 주가 영향:[상승/하락/유지 전망과 그 이유]

# 감성 분석 실행 부분

sentiment_result = sentiment_analysis_chain.invoke({
“company_name": company_name,
“news_summary": news_summary

»

sentiment_analysis = sentiment_result["text"]

무 분석 기능

기업의 재무 상태에 대한 분석은 장기 투자 결정에 핵심적인 역할을 합니다. 재무 분석
기능은 기엽의 수익성, 안정성, 성장성 등을 평가하고, 산업 평균과 비교하여 기엽의 재무
건전성을 종합적으로 판단합니다.

재무 분석 기능 구현을 위한 프롬프트는 다음과 같습니다.

yahoo finance APIS 사용하여 주식의 재무 정보를 수집하고 분석하는 기능을
Python = 만들어 주세요. 다음 기능을 포함하여 만들어주세요

종목 BOM 회사명을 매개변수로 받으며, 주요 재무 정보 수집, 주요 재무 비율 계산,
산업 평균 데이터와 비교를 위한 섹터별 평균 데이터 합하여 만들어 주세요.

또 분석 시 감성 분석 결과도 입력받아 종합적인 SAB 수행해서 한국어로

응답해주세요.


--------------------------------------------------

[페이지 15]
위와 같은 프롬프트로 작성해보았더니 alo] 출력은 다음과 같습니다.                                   위 정보를 바탕으로 {company_name}2| 재무 상태와 투자 관점에서의 시사점을

# 재무 정보 수집 함수                                                                 객관적인 지표와 데이터를 중심으로 분석해주세요.

2                 글         즈세요
def fetch_financial_data(ticker):                                                                다음 형식으로 한국어(한글)로 답변해주세요:

ES 종목의 상세 재무 정보를 가져옵니다."""

ty:                                                # 재무 지표 분석

# 한국 주식인 경우 ‘KS 접미사 추가                                                 (제공된 데이터에 있는 지표만 분석해주세요)

수익성 지표ㆍ
if isinstance(ticker, str) and ticker.isdigit() and len(ticker) == 6:                                              1. 수익성 지표:

- Age. yA    사업   [수치
ticker = 『00680469"                                                        순이익률: [수치]% (산업 평균: [수치]%)

- 808(자기자본수익률): [수치]% (산업 평균: [수치]%)

stock = yf.Ticker(ticker)

# 재무 분석 프롬프트 정의                                                                2. 안정성 지표:

유동비율: [수치] (산업 평균: [수치])

financial_analysis_prompt = PromptTemplate(
부채비율: [수치]% (산업 Bat: [수치]%)

input_variables=["company_name", "financial_data", "sentiment_result"],

template=

{company_name}2|] 재무 정보와 뉴스 감성 분석 결과를 종합적으로 분석해주세요.                   3. 가치 지표:

- 『/6(주가수익비율): [수치] (산업 평균: (Al)
재무 정보:                                                                      - 배당수익률: [수치]%

{financial_data}
4. 시장 지표:

뉴스 감성 분석 결과:                                                                 - 시가총액: [수치] 원

- 52주 최고/최저 대비 현재가: 현재가가 최고가의 [수치]%, 최저가의 [수치]%

{sentiment_result}


--------------------------------------------------

[페이지 16]
He 산업 내 위치
- 산업 내 재무 건전성 순위:[상위/중위/하위]

- 주요 경쟁사 대비 특징:[데이터 기반 분석]

\# 뉴스 및 감성 분석과의 연관성
- 최근 뉴스가 재무 상태에 미치는 영향:[객관적 분석]

- 뉴스 감성과 투자 관점의 연관성:[데이터 기반 분석]

## 투자 시사점

- 단기 관점 (3개월):[객관적 시사점]

- 중장기 관점 (6개월 이상):[객관적 시사점]

## 종합 평가
- 재무 건전성: [A+/A/B+/B/C+/C/D] (정량적 지표 기반)
- 투자 MAS: [상/중상/중/중하/하] (정량적 지표 기반)

의견은 배제하고, 오직 데이터와 객관적 지표에 근거하여 분석해주세요.
제공된 데이터에 없는 SSS SAMA 제외해주세요.

# 재무 분석 실행 부분

financial_result = financial_analysis_chain.invoke({
“company_name": company_name,
“financial_data": json.dumps(financial_data, ensure_ascii=False),
“sentiment_result": sentiment_analysis

»

financial_analysis = financial_result["text"]

주식분석 시스템의 세가지 핵심 기능은 독립적으로 작동하는 것이 아니라, 하나의
통합된 시스템으로 연계되어 작동합니다. 각각의 핵심기능들이 어떻게 유기적으로
연결되는지 살펴보겠습니다.

주식분석 시스템에서 데이터는 다음과 같은 단계로 처리됩니다.

입력 - 데이터 수집 + 1차 분석 + 2차 분석 - 종합분석 - 결과 출력

각각의 단계별 상세내역을 알아보면

입력: 사용자로부터 분석할 종목 코드와 회사명 입력

데이터 수집: 입력받은 정보를 바탕으로 뉴스 데이터와 재무 데이터를 수집

1차분석: 수집된 뉴스 데이터를 요약하여 핵심 내용 주출

2차분석: 뉴스 요약을 바탕으로 감성 분석


--------------------------------------------------

[페이지 17]
종합분석: 재무데이터와 감성 분석 결과를 통합하여 종합적인 투자분석 수

결과출력: 분석결과를 사용자가 이해하기 쉬운 형태로 출력

이러한 의존성은 각 기능이 독립적으로 작동하면서도 서로의 결과를 활용하여 더 풍부한
분석을 가능하게 합니다.

2. 시에이전트 아키텍처 이해하기

앞에서 정의한 핵심 기능을 바탕으로 이를 구현하기 위한 시 에이전트 아키텍처를
살펴보겠습니다. 시에이전트는 사용자를 대신하여 정보를 수집하고, 분석하며, 의사결정을
지원하는 자율적인 시스템입니다.

일반적인 시에이전트의 기본 구성 요소

- 센서(560501): 외부 환경에서 데이터를 수집

- 추론 엔진(863500109 Engine): 수집된 데이터를 해석하고 의미 있는 정보로 변환
- 액추에이터(&0040[0「): FZ 결과를 바탕으로 행동

- 학습 모듈(.6300109 Module): AHS 통해 SSB 개선

- 도구(10019): 특정 FAS 수행하기 위해 활용하는 외부 리소스나 Api

- O]22|(Memory): 과거 상호작용과 Bas 저장

- 계획 모듈(0300109 Module): 목표 달성을 위한 단계적 계획을 수립

주식분석 시스템은 일반적인 시에이전트 아키턱처를 단순화하여 다음 세가지 핵심
구성요소에 초점을 맞추고 있습니다.

주식분석 시스템의 시에이전트 구성 요소

- 센서(560501): yahoo finance API, 네이버 뉴스 APIS 통한 데이터 수집

론 엔진(663500109 Engine): LangChaini} LLMS 활용한 분석 모듈

츠
- 액추에이터(600431[0「): 분석 결과를 구조화하여 반환하는 모듈

주식분석 시스템은 시에이전트의 다른 구성요소인 학습 모듈, 장기 메모리, 계획 모듈은
구현되어 있지 않습니다. 이는 현재 버전의 시스템이 단일 분석에 초점을 맞추기 있기
때문입니다. 추후 확장 AME 이런 구성요소를 추가하여 더 지능적인 시스템으로 학습과

예측이 가능한 시스템으로 발전시킬 수 있을 것입니다.

니버기반 시에이전트의 특징

UMS 핵심으로 하는 우리의 시에이전트는 다음과 같은 특징을 가집니다.

자연어 이해: 사용자의 요청을 자연어로 이해하고 처리
연쇄적 추론: 여러 단계의 분석을 순차적으로 진행

설명 가능성: 분석 결과에 대한 근거와 설명 제공


--------------------------------------------------

[페이지 18]
실제 코드에서 LangChain2| 체인 구조를 통해 이러한 SAB 구현하고 있습니다.
뉴스분석, 감성분석, 재무분석이 순차적으로 진행되며, 각 단계의 결과는 다음 단계의
입력으로 활용됩니다.

이번 장에서는 주식분석 시스템의 세가지 핵심기능을 정의하고, 이들이 어떻게 서로
연계되어 작동하는지 살펴보았습니다. 또한 이러한 기능을 구현하기 위해 일반적인
시에이전트 아키텍처의 핵심 구성요소를 어떻게 활용하고 단순화했는지 알아보았습니다.
다음 절에서는 이러한 시에이전트를 실제로 구현하기 위해 LangChain 프레임워크를

어떻게 활용하는지 자세히 살펴보겠습니다.

B. LangChainS 활용한 시파이프라인 구축

1. LangChain 기본 개념 이해하기

1ㄴ80900807은 대형 언어 모델을 활용한 어플리케이션 개발을 위한 프레임워크로, 시기반
시스템을 쉽게 구축할 수 있도록 도와줍니다. 특히 비개발자가 복잡한 시시스템을 구축할
때, LangChain® 많은 부분을 추상화하여 개발 과정을 단순화해줍니다.

180900810의 주요 구성 요소

ㄴ80900800은 다음과 같은 핵심 구성요소를 제공합니다.

- 모델(40061): 다양한 언어 모델과 상호작용할 수 있는 통합 인터페이스를

제공합니다.
- 프롬프트: 언어 모델에 전달할 지시사항을 구조화하고 템플릿화할 수 있습니다.

- 체인: 여러 SAL SPS 순차적으로 연결하여 복잡한 워크플로우를 구성할

- 메모리: 대화 히스토리나 상태를 유지할 수 있는 메커니즘을 제공합니다.
- 도구: 외부 APL, 데이터베이스, 검색엔진 등과 UMS 연결할 수 있습니다.
- 에이전트: 목표를 달성하기 위해 자율적으로 도구를 선택하고 사용할 수 있는
시스템입니다.
우리의 주식분석 시스템에서는 주로 모델, 프로프트, 체인 구성요소를 활용하여
파이프라인을 구축합니다.

# LangChain 관련 라이브러리 임포트
from langchain_openai import ChatOpenAl
from langchain.chains import LLMChain

from langchain.prompts import PromptTemplate

#UM 모델 설정

1100 = ChatOpenAl(temperature=0.1, model="gpt-4")

# 프롬프트 템플릿 정의 및 체인 생성


--------------------------------------------------

[페이지 19]
news_analysis_chain = LLMChain(
IIm=llm,

prompt=news_analysis_prompt,

verbose=False

위 코드에서는 006041의 GPT-4 SAS 활용하여 LMchains 생성하는 과정을
보여줍니다. 모델 설정의 파라미터 값인 temperature=0.12 모델의 창의성을 낮게
설정하여 사실적이고 일관된 응답을 얻기 위한 파라미터입니다.

2. 체인과 프롬프트 템플릿 활용하기

위에서 설명한 거와 같이 LangChain2| 가장 강력한 기능 중 하나는 '체인'과 '프롬프트
템플릿'을 통해 시의 동작을 정확하게 제어할 수 있다는 점입니다. 주식분석 시스템에서는
이 기능을 활용하여 세가지 핵심 분석 단계를 구현합니다.

프롬프트 템플릿 설계

프롬프트 템플릿은 UMA 전달할 지시사항을 구조화하는 방법입니다. 적절한 프롬프트
템플릿은 시가 원하는 형식과 내용으로 응답하도록 유도합니다.

# 뉴스 분석 프롬프트 템플릿

ews_analysis_prompt = PromptTemplate(

input_variables=["company_name", "news_data"],

template="""

{company_name}Ol] 대한 최신 FAS 분석해주세요.

아래는 {company_name}O] 대한 최신 뉴스 목록입니다:

{news_data}

위 FASS 종합하여 {company_name}2| 최신 SAB 간략히 요약해주세요.

반드시 한국어(한글)로 답변해주세요.

)
이 프롬프트 템플릿은 두가지 입력변수(06007080_08016, news_data)\S 받아 템플릿 내에
삽입하는 구조를 가집니다. 이를 통해 회사와 뉴스 데이터에 대해 동일한 분석 지시를
반복적으로 사용할 수 있습니다.

체인 구성 및 실행

LangChain2| 체인은 UM, 프롬프트 템플릿, 그리고 필요에 따라 기타 구성요소를
결합하여 하나의 처리 단위를 만듭니다. 주식분석 시스템에서는 세 가지 핵심 체인을
구성합니다.

# 체인 생성

news_analysis_chain = LLMChain(

Iim=tlm,


--------------------------------------------------

[페이지 20]
prompt=news_analysis_prompt,                                                    3. 순차적 처리 파이프라인 설계하기

verbose=False                                                            주식분석 시스템의 AMS 데이터 수집부터 AS 분석까지 이어지는 순차적인 처리

파이프라인입니다. 이 파이프라인은 130900811의 체인들을 연결하여 구현됩니다.

sentiment_analysis_chain = LLMChain(

주식분석 시스템의 파이프라인 구성도

IIm=llm,

prompt=sentiment_analysis_prompt,                                                 데이터 수집 > FA 요약 > 감성 BY > 재무 분석 > 결과 통합

verbose=False
이러한 파이프라인을 코드로는 다음과 같습니다.

# 1. 데이터 수집
financial_analysis_chain = LLMChain(
news_data = fetch_stock_news(company_name)
IIm=llm,
financial_data = fetch_financial_data(ticker)
prompt=financial_analysis_prompt,

verbose=False
# 2. 뉴스 요약

news_result = news_analysis_chain.invoke({

“company_name": company_name,

각각의 HOS 동일한 LMS 사용하지만 서로 다른 프롬프트 템플릿을 가지고 있어 각기                  "news_data”: json.dumps(news_data, ensure_ascii=False)

다른 분석 작업을 수행합니다.                                                            )

news_summary = news_result["text"]

# 3. 감성 분석


--------------------------------------------------

[페이지 21]
sentiment_result = sentiment_analysis_chain.invoke({
“company_name": company_name,
“news_summary": news_summary

»

sentiment_analysis = sentiment_result["text"]

# 4. 재무 분석

financial_result = financial_analysis_chain.invoke({
“company_name": company_name,
“financial_data": json.dumps(financial_data, ensure_ascii=False),
“sentiment_result": sentiment_analysis

»

financial_analysis = financial_result["text"]

#5. 결과 통합

result = {
"ticker": ticker,
“company_name": company_name,
"news_titles": news_titles,
“news_summary": news_summary,
“sentiment_analysis": sentiment_analysis,

“financial_analysis": financial_analysis,

"raw_data": json_serializable({
"news_data": news_data,
“financial_data": financial_data

»,

“status”: "success"

이 파이프라인의 SAS 2 단계의 출력이 다음 단계의 입력으로 사용된다는 점입니다.
YS 들어, 뉴스 요약 단계에서 생성된 newssummaryE 감성분석 단계의 입력으로

사용되고, 감성 분석 Apel sentiment_analysis= 재무 분석 단계의 입력으로 사용됩니다.

4. 실제 BOOWA LangChain 활용법

이제 주식분석 시스템에서 130900817을 활용하는 실제 AOS 자세히 살펴보겠습니다.

def analyze_stock(ticker, company_name=None):

주식 종목을 분석하고 결과를 반환합니다.

Args:
ticker (str): 주식 종목 DE (Of: '005930')

company_name (str, optional): 회사 이름. 제공되지 않으면 자동 조회합니다.


--------------------------------------------------

[페이지 22]
Returns:

dic: 분석 결과를 포함하는 사전

#LLM 설정

10 = ChatOpenAl(temperature=0.1, model="gpt-4")

#1. 회사 이름 확인
if not company_name:
try:
stock = yf.Ticker(ticker)
company_name = stock.info.get("shortName”, ticker)
except:
# yfinance4lA| 회사명을 가져올 + 없을 경우 기본값 설정

company_name = 『"종목코드 {ticker}"

# 한국 주식 종목코드별 회사명 매핑 (주요 종목)
kr_stock_names = {

"005930": "삼성전자",

"000660": "5(하이닉스",

"035420": "NAVER",

"035720": "카카오",

"051910":

"207940":

"006400":

"068270":

"000270":

"005380":

"16화학",

"삼성바이오로직스",
"삼성501",
"셀트리온",

"기아",

"현대차"

# 매핑된 회사명 있으면 사용

if ticker in kr_stock_names:

company_name = kr_stock_names[ticker]

# 2. 뉴스 수집

news_data = fetch_stock_news(company_name)

# 3. 재무 정보 수집

financial_data = fetch_financial_data(ticker)

#4, 체인 생성

news_analysis_chain = LLMChain(

lim=lIlm,

prompt=news_analysis_prompt,


--------------------------------------------------

[페이지 23]
verbose=False

sentiment_analysis_chain = LLMChain(
IIlm=tllm,
prompt=sentiment_analysis_prompt,

verbose=False

financial_analysis_chain = LLMChain(

Ilm=llm,
prompt=financial_analysis_prompt,

verbose=False

#5. 순차적으로 체인 실행
#51 뉴스 분석
news_result = news_analysis_chain.invoke({
“company_name": company_name,
“news_data": json.dumps(news_data, ensure_ascii=False)
»

news_summary = news_result["text"]

# 5.2 감성 분석

sentiment_result = sentiment_analysis_chain.invoke({
“company_name": company_name,
“news_summary”": news_summary

)

sentiment_analysis = sentiment_result["text"]

# 5.3 재무 분석

financial_result = financial_analysis_chain.invoke({
“company_name": company_name,
“financial_data": json.dumps(financial_data, ensure_ascii=False),
“sentiment_result": sentiment_analysis

»

financial_analysis = financial_result["text"]

#6. 결과 반환

# 뉴스 제목 목록 생성

0ㅁ60\05.11065 = []

if isinstance(news_data, list):
for item in news_data:

if isinstance(item, dict) and ‘title’ in item:


--------------------------------------------------

[페이지 24]
# 날짜 추가

if ‘date’ in item and 116001['0216]:
news_titles.append(f"{item['title']} ({item['date’]})")

else:

news_titles.append(item|'title’])

# 결과를 JSON 직렬화 가능한 SES 변환
result = {
"ticker": ticker,
“company_name": company_name,
“news _titles": news_titles,
"news_summary": news_summary,
“sentiment_analysis": sentiment_analysis,
“financial_analysis": financial_analysis,
“raw_data": json_serializable({
"news_data": news_data,
“financial_data": financial_data
»

"status": "success"

return result

except Exception as e:

00010"분석 중 오류 발생: {str(e)}")

print(traceback.format_exc())

return {
"ticker": ticker,
"“company_name": company_name if company_name else f*S 525

{ticker}",

“error”: str(e),

"status": "error"

이 ASE 다음과 같은 특징을 가집니다.
- 초기화 및 데이터 수집: LLM 설정, 회사명 확인, 뉴스 및 재무데이터 수집
- 체인 생성: 세가지 분석에 대한 LLM Chain 생성
- 순차적 체인 실행: 각 체인의 10006메서드를 순차적으로 호출하여 수행

- 결과 통합 및 반환: 모든 분석 결과를 하나의 딕셔너리(000로 통합하여 반환

[참고] LLM 파라미터 최적화
LangChainO|A] LLIMS 설정할 때 여러 파라미터를 조정할 수 있습니다.

110 = ChatOpenAl(temperature=0.1, model="gpt-4")


--------------------------------------------------

[페이지 25]
파라미터의 의미는 다음과 같습니다.

Temperature: 모델의 창의성을 조절하는 값으로, 0에 가까울수록 결정적이고 일관된
응답을, 1에 가까울수록 다양하고 창의적인 응답을 생성합니다. 주식분석처럼 정확성이
중요한 작업에서는 SES temperature 2B 사용합니다.

Model: 사용할 언어 모델을 지정합니다. 우리는 가장 고성능인 " 00ㄴㄷ4"를 선택했지만,
비용과 SSB De{s+O} “gpt-3.5-turbo’ 같은 SAS CHAS 수도 있습니다.

그 외 필요에 따라 다음과 같은 파라미터도 설정할 수 있습니다.

Max_tokens: 모델이 생성할 최대 토큰 +S 제한합니다.

n: 생성할 Seo] 수를 지정합니다.

1000: 토큰 샘플링 방법을 조절합니다.

[참고] 비동기 처리 옵션
LangChain2 비동기 처리도 지원합니다. 현재 주식분석 시스템은 동기 방식으로

작성되어 있지만, 성능 개선을 위해 다음과 같이 비동기로 변경할 수 있습니다.

async def analyze_stock_async(ticker, company_name=None):
"주식 SSS 비동기적으로 분석합니다."

try:
100 = ChatOpenAl(temperature=0.1, model="gpt-4")

# 데이터 수집 (병렬 처리 가능)

news_task = asyncio.create_task(fetch_stock_news_async(company_name))

financial_task = asyncio.create_task(fetch_financial_data_async(ticker))

news_data = await news_task

financial_data = await financial_task

# 체인 생성 및 실행은 유사하지만 ainvoket) 메서드 사용
news_result = await news_analysis_chain.ainvoke({
“company_name": company_name,

"news_data": json.dumps(news_data, ensure_ascii=False)

# …… 나머지 부분 유사하게 구현 …
except Exception as 6:

# 예외 처리

비동기 처리는 특히 여러 SSS 동시에 분석하거나, 데이터 수집 단계에서 여러 apis
병렬로 호출할 때 성능 향상을 가져올 수 있습니다.

이번 절에서는 13090001프레임워크를 활용하여 주식분석 시파이프라인을 구축하는

SYS 살펴보았습니다. 130901800의 프롬프트 템플릿과 체인 PAE 복잡한 시작업을
모듈화하고 순차적으로 처리할 수 있게 해주며, 이를 통해 비개발자도 강력한 시시스템을

다음장에서는 시와 함께 주식분석 시스템 PSS 진행해 보겠습니다.


--------------------------------------------------

[페이지 26]
3장 주식분석 시스템 구축
A. 외부 ^미활용하기

비개발자로서 AIS 활용하여 주식분석 시스템을 구축할 때 가장 중요한 부분 중 하나는
외부 APs 효과적으로 활용하는 것입니다. 이번 장에서는 외부401(/31100, 0246「)를 통해
뉴스 및 재무데이터를 수집을 위해 시에게 어떻게 대화하고 코드를 생성하는지

알아보겠습니다.

1. 네이버 뉴스 APIS 최신 뉴스 가져오기

이번에는 네이버 뉴스 APIS 활용하여 특정 기업에 관한 최신 FAS 수집하는 방법을

살펴보겠습니다.

Al: 네이버 뉴스4미를 사용하면 회사 이름으로 검색하여 최신 FAS 가져올 수
있습니다. APIASS 위해서는 네이버 개발자 센터에서 클라이언트 10와 시크릿을
발급받아야 합니다. 예시코드를 보여드릴까요?

저자: 네 예시코드를 보여주세요. 회사명을 매개변수로 받도록 작성해주세요.

저자: 주식분석 시스템을 만들고 싶습니다. 먼저 특정 회사에 관한 최신 뉴스를

자동으로 수집하고 싶습니다.

Al: 최신 FAS 자동으로 수집하는 방법으로는 FAAPIS 활용하는 것이 가장
효과적입니다. 한국 뉴스라면 네이버 FAAPI7- 좋은 선택입니다. 6559피드를 사용하거나
웹스크래핑을 하는 BAS 있지만, 미가 가장 안정적이고 구조화된 데이터를

제공합니다.

저자: 회사 이름으로 검색해서 최신 FAS 네이버 FAAPIS 사용하여 수집하고
싶습니다.

이러한 대화 과정을 통해 시는 다음과 같은 코드를 생성했습니다.

def fetch_stock_news(query):
"""네이버 검색 APIS 사용하여 주식 관련 최신 FAS 검색합니다."""
# 네이버 API 인증 정보
client_id = os.environ.get("NAVER_CLIENT_ID", "NAVER API 취득 필요")

client_secret = os.environ.get("NAVER_CLIENT_SECRET", " NAVER API 취득 필요")

# 결과 저장 리스트

articles = []

try:
000\"네이버 APIZ {query} 관련 FAS 검색합니다…")

# 검색어 인코딩


--------------------------------------------------

[페이지 27]
encText = urllib.parse.quote(query)

# FA 검색 API URL (최신순 정렬, 1074 결과)

url = "https://openapi.naver.com/v1/search/news?query=" + encText +

"&display=10&sort=date"

#AP| 요청 설정
request = urllib.request.Request(url)
request.add_header("X-Naver-Client-Id", client_id)

request.add_header("X-Naver-Client-Secret", client_secret)

# API 요청 보내기
response = urllib.request.urlopen(request)

rescode = response.getcode()

if rescode == 200:
# 응답 데이터 읽기
response_body = response.read()

response_body_str = response_body.decode('utf-8')

# JSON 데이터 파싱

news_data = json.loads(response_body_str)

# 검색 결과 항목 확인
if 'items' in news_data and news_data['items’):

print(f"{len(news_dataf'items'))}7H2] 뉴스 검색 결과를 찾았습니다.")

# 각 뉴스 아이템에서 필요한 정보 추출

for item in news_data['items'][:5]: # 최대 5개만 사용
#HTML 태그 제거 및 특수 문자 처리
title = clean_text(item['title’])
link = itemf['link’]

pub_date = item['pubDate')

# 날짜 형식 변환
try:

# Qi: "Mon, 10 Apr 2023 10:30:00 +0900"

date_obj = datetime.strptime(pub_date, "%a, %d %b %Y

%H:%M:%S %z")

news_date = date_obj.strftime("%Y-%m-%d %H:%M")
except Exception as e:

ㅁ00010"날짜 형식 변환 오류: (str(e)}")

news_date = pub_date # 원본 날짜 형식 유지


--------------------------------------------------

[페이지 28]
# 기사 정보 저장
articles.append({                                                               print(f" {len(articles)}7H2| 뉴스 항목을 찾았습니다.")
"title": title,                                                          return articles[:5] # 최대 5개까지만 반환
"0460": link,
"date": news_date                                                                              except Exception as e:
print'zA 검색 중 오류 발생: (stre)}")
print(traceback.format_exc())
print(f'72 추가: {title[:30]}... ({(news_date})")                                       # OF 발생 시 기본 뉴스 반환
else:                                                                                                        current_date = datetime.now().strftime("%Y-%m-%d")
0ㅁ000\("네이버 API 검색 결과에 뉴스 항목이 없습니다.")                                  return [{
else:                                                                                 "title": f'{query}O] 대한 FAS 검색하는 중 오류가 SAABSuch”,
ㅁ00010"네이버 API 요청 오류 RE: (rescode}")                                             "url": "https://news.naver.com/",

"date": current_date

# 결과가 없으면 기본 메시지                                                          )

if not articles:

print(f' 4: {query}O] 대한 FAS 찾을 수 없습니다.")

이 BEE 네이버 뉴스 APIS 사용하여 특정 키워드(호사명)에 대한 최신 FAS
00060트02666 = datetime.now().strftime("%Y-%m-%d")                               수집하는 함수입니다. 주요 특징은 다음과 같습니다.
articles = [{

“title”: f'(query}O 대한 최신 뉴스를 찾을 수 없습니다",
“url” "https://news.naver.com/",                                                  - APIAS: 네이버 APIATSS 위한 클라이언트10와 시크릿 키를 설정합니다.

"date": current_date                                                        - 요청 설정: 네이버&미에 요청을 보내기 위한 헤더와 파라미터를 설정합니다.

- 응답 처리: &0!응답을 파싱하여 필요한 정보(제목, uRL Saye 추줄합니다.


--------------------------------------------------

[페이지 29]
텍스트 정제: BeautifulsoupS 사용하여 111\Ｌ태그와 특수문자를 제거하여
깨끗한 텍스트를 얻습니다.

2. Yahoo Finance APIS 주식 데이터 수집하기

Yahoo Finance API= 전 세계 주식 시장의 데이터를 무료로 제공하는 강력한 도구입니다.

『0100에서는 11083066 라이브러리를 통해 이 aris 쉽게 활용할 수 있습니다. 처음
데이터 FAS 위해 시에게 다음과 같이 질문을 했습니다.

저자: 6/0100을 이용하여 한국 주식 데이터를 수집하려고 합니다. 방법을 알려주세요.

Al: 주식 데이터를 수집하는 방법에는 yahoo Finance APIS 활용할 수 WE yfinance
라이브러리가 있습니다. 한국 FAC] 경우 종목코드 뒤에 KSB 붙여서 요청할 수
있습니다. 간단한 예시 코드를 제공해드릴까요?

저자: 예시 BES 보여주세요. 그리고 주식의 기본 정보뿐만 아니라 재무비율, 산업

평균과의 비교, 경쟁사 정보도 함께 보여주세요

Al: yfinance 라이브러리를 사용하여 기본 정보와 재무 비율을 가져올 수
평균과 경쟁사 정보는 별도로 정의가 필요할 수 있습니다. 이를 모두 포함하는 함수를
작성해 드리겠습니다.

저자: 알겠습니다. 그런데 40!요청이 실패할 SPS 대비해야 할 것 같습니다. 오류
처리와 기본값 설정도 포함한 함수를 만들어 주세요. 종목코드를 매개변수로 받았으면

좋겠습니다.

이러한 대화 과정을 통해 시는 점점 더 구체적인 요구사항을 이해하고, 최종적으로
다음과 같은 코드를 생성했습니다.
def fetch_financial_data(ticker):
ES 종목의 상세 재무 정보를 가져옵니다."
try:
# 한국 주식인 경우 '9' 접미사 추가
if isinstance(ticker, str) and ticker.isdigit() and len(ticker) == 6:

ticker = f"{ticker}.KS"

stock = yf.Ticker(ticker)

# 기본 정보
try:
info = stock.info
except:
# 정보 가져오기 실패 시 기본값 설정

info = {


--------------------------------------------------

[페이지 30]
"shortName": "종목코드 {ticker}",
"sector": "Technology",
“currentPrice": 50000,
“marketCap": 500000000000,
“fiftyTwoWeekHigh": 60000,

“fiftyTwoWeekLow": 40000

# 예시 MS 비율 (실제 데이터가 없는 경우 대체)

financial_ratios = {

‘profit_margin': info.get(‘profitMargins', 8.5) * 100 if info.get(‘profitMargins')

else 8.5, # 예시 순이익률 (%)
‘current_ratio’: info.get(‘currentRatio’, 2.7), # 예시 유동비율
‘debt_ratio’: info.get(‘debtToEquity’, 32.4) / 100 if info.get('debtToEquity’)
else 32.4,  * 예시 부채비율 (%)
‘roe’: info.get(‘returnOnEquity’, 12.8) * 100 if info.get(‘returnOnEquity') else
# 예시 자기자본수익률 (%)
‘pe_ratio': info.get(‘trailingPE’, 15.2), # 예시 또는 실제 06 비율

'ps_ratio': info.get(‘priceToSalesTrailing12Months’, 2.3), # 예시 또는 실제

‘dividend_yield': info.get(‘dividendYield’, 0.02) * 100 if

info.get(‘dividendYield’) else 2.0, # 예시 또는 실제 배당수익률 (%)

‘volatility’: 18.5    # 예시 변동성 (%)

# 섹터 평균 데이터
sector = info.get('sector’, 'Technology’)
sector_averages = {

‘Technology’: {
‘profit_margin’: 15.2,
‘current_ratio’: 2.5,
‘debt_ratio': 35.0,
‘roe’: 18.5,
‘pe_ratio': 25.4

}

‘Financial Services’: {
‘profit_margin’: 22.3,
‘current_ratio’: 1.3,
‘debt_ratio': 58.0,
‘roe’: 12.1,

‘pe_ratio': 15.2
}
# …… 다른 섹터 데이터 .…


--------------------------------------------------

[페이지 31]
# 기본값 설정

default_sector_avg = {
‘profit_margin': 10.0,
‘current_ratio': 2.0,
‘debt_ratio': 40.0,
‘roe’: 15.0,

‘pe_ratio': 20.0

sector_avg = sector_averages.get(sector, default_sector_avg)

# 주요 경쟁사 데이터 (고정 데이터)
competitors = {

'005930':[ # 삼성전자

#110<6『에서 '9' 제거하여 경쟁사 검색

ticker_base = ticker.split(’.’)[0]

result = {
"company_name": info.get("shortName", "종목코드 {ticker}"),
"ticker": ticker,
“sector”: sector,
"current_price": info.get("currentPrice", 50000),
"market_cap": info.get("marketCap", 500000000000),
"52w_high": info.get("fiftyTwoWeekHigh", 60000),
"52w_low": info.get("fiftyTwoWeekLow", 40000),
“financial_ratios": financial_ratios,
“sector_averages”: sector_avg,
"competitors": competitors.get(ticker_base, []),

“analyst_recommendations": info.get("recommendationMean", 2.5),

{‘name': '5\하이닉스', ‘ticker’: '000660.KS', 'pe_ratio': 18.2, 'roe': 10.5},
{'name': 'LG@ At’, ‘ticker’: '066570.KS', 'pe_ratio’: 12.1, ‘roe’: 8.3},

{'name': '4{4SDI’, ‘ticker’: '006400.KS', 'pe_ratio': 30.4, ‘roe’: 9.7}

"“forward_pe": info.get("forwardPE”, financial_ratios['pe_ratio}] * 0.9),

"dividend_yield": financial_ratios[‘dividend_yield’]

L
# .… 다른 종목의 SBA 데이터 .…

return result

except Exception as e:

print AS 정보 수집 중 오류 Be: (str(e)}")


--------------------------------------------------

[페이지 32]
print(traceback.format_exc())
# 오류 발생 시 기본 데이터 반환
return {
“company_name": "종목코드 {ticker}",
"ticker": ticker,
"sector": "Technology",
“current_price”: 50000,
“market_cap": 500000000000,
"52w_high": 60000,
"S2w_low": 40000,
"financial_ratios": {
‘profit_margin’: 8.5,
‘current_ratio’: 2.7,
‘debt_ratio': 32.4,
‘roe’: 12.8,
‘pe_ratio': 15.2,
‘ps_ratio’: 2.3,
‘dividend_yield’: 2.0,
‘volatility’: 18.5
}
"sector_averages": {

‘profit_margin’: 10.0,

‘current_ratio’: 2.0,
‘debt_ratio': 40.0,
‘roe’: 15.0,
‘pe_ratio': 20.0

“competitors”: []

Al= yahoo Finance APIS 사용하여 주식 데이터를 수집하는 함수를 만들었습니다. 이
함수의 주요 특징은 다음과 같습니다.

- 한국 주식 대응:6자리 숫자 코드인 경우 한국 FACS 인식하여 Ks 접미사를
추가합니다.

- 재무 비율 계산: yahoo Finance APIOA 제공하는 다양한 재무 지표를 수집하고,
없는 경우 기본값을 설정합니다.

- 산업 평균 데이터: 섹터별 평균 데이터를 포함하여 해당 기업의 상대적 위치를
평가할 수 있게 합니다.

- 경쟁사 정보: 주요 종목별 경쟁사 SHS 포함하여 비교 분석이 가능하게
합니다.

[효과적인 데이터 수집 프롬프트 작성법]


--------------------------------------------------

[페이지 33]
Yahoo Finance APIS 활용한 데이터 수집 함수 개발 사례를 통해, 효과적인 데이터

수집 프롬프트 작성법을 알아보겠습니다.

추상적 질문에서 구체적 요청으로 발전시키기

위 대화에서 볼 수 있듯이, 처음에는 “Pythons 이용하여 한국 주식 데이터를

수집하려고 합니다. 방법을 알려주세요"라는 추상적인 질문으로 시작했습니다. 이후
Alo] 응답을 기반으로 점점 더 구체적인 요청을 추가했습니다. 이런 단계적 접근
방식은 특히 비개발자가 시를 활용할 때 유용합니다.

대화식 요구사항 구체화
씨와의 대화를 통해 요구사항을 점진적으로 구체화하는 것은
작성하는 것보다 효과적일 수 있습니다. 각 단계에서 alo] 응답을

부분이나 개선이 필요한 부분을 추가 요청할 수 있습니다.

오류 처리와 기본값 설정 명시
“&01요청이 실패할 SPS 대비해야 할 것 같습니다“와 같은 요청을 통해 예외처리와
기본값 설정을 명시했습니다. 실제 환경에서는 다양한 오류가 발생할 수 있으므로,

이러한 안정성 관련 요구사항을 포함하는 것이 중요합니다.

"종목 코드를 매개변수로 받았으면 좋겠습니다:와 같이 구체적인 구현 세부사항을
제안했습니다. 이렇게 파라미터를 제안하면 코드의 일관성을 유지하고 다른 부분과의
통합이 쉬워집니다.

이러한 팁을 적용하여 프롬프트를 작성하면, 시가 좀더 정확하고 유용한 ACS 생성할

수 있습니다.

3. 예외처리와 안정성 확보하기

시는 외부 APIS 활용할 때 안정성을 위해 예외처리를 포함하여 제공하였습니다. 이러한
예외처리는 40!요청이 실패하거나 예상치 못한 SHO] 오더라도 시스템이 계속 작동할 수
있도록 해줍니다. 시는 주식분석 시스템의 예외 처리는 다음과 같은 방식으로

처리하였습니다.

기본값 제공: AP] 요청이 AMS SPS 대비하여 기본값을 제공합니다.

# 정보 가져오기 실패 시 기본값 설정
info = {
"shortName": "종목코드 {ticker}",
"sector": "Technology",
“currentPrice": 50000,
“marketCap": 500000000000,

“fiftyTwoWeekHigh": 60000,


--------------------------------------------------

[페이지 34]
“fiftyTwoWeekLow": 40000

조건부 데이터 추출: APSHA 특정 데이터가 없을 경우 기본값을 사용합니다.

financial_ratios = {

‘profit_margin’: info.get(‘profitMargins’, 8.5) * 100 if info.get(‘profitMargins') else 8.5,

#.. 다른 재무 비율들 ..

전체 함수를 ㅁ/-6×660[ 블록: 함수 전체를 ㅠ-6×660(블록으로 감싸서 어떤 오류가

발생하더라도 최소한의 결과를 반환하도록 합니다.

try:
# 메인 2A.
except Exception as e:
000\"뉴스 검색 중 오류 Be: {str(e)}")
print(traceback.format_exc())
# 오류 발생 시 기본 뉴스 반환
current_date = datetime.now/().strftime("%Y-%m-%d")
return [{
"title": f'{query}O] 대한 FAS 검색하는 중 오류가 발생했습니다",

"url": "https://news.naver.com/",

"date": current_date

세부 예외 처리: 특정 작업에서 발생할 + 있는 예외를 개별적으로 처리합니다.

# 날짜 형식 변환
try:
# Oj: "Mon, 10 Apr 2023 10:30:00 +0900"
date_obj = datetime.strptime(pub_date, "%a, %d %b %Y %H:%M:%S %z")
news_date = date_obj.strftime("%Y-%m-%d %H:%M")
except Exception as e:
print(f* Sat 형식 변환 오류: {str(e)}")

news_date = pub_date # 원본 날짜 형식 유지

FASS: 오류가 SARS 때 디버깅을 위해 충분한 정보를 로깅합니다.

0ㅁ00010"뉴스 검색 중 오류 발생: {50(6)}")

print(traceback.format_exc()) # 스택 트레이스 출력

빈 결과 처리: 미가 결과를 반환하지 않는 경우를 대비합니다.

# 결과가 없으면 기본 메시지

if not articles:


--------------------------------------------------

[페이지 35]
print(f'3 2: {query} 대한 FAS 찾을 수 없습니다")
current_date = datetime.now/().strftime("%Y-%m-%d")
articles = [{

"title": f'{query}Ol 대한 최신 FAS 찾을 수 없습니다",

"40": "https://news.naver.com/",

"date": current_date

)

이러한 예외 AAS 통해 외부 40의 불안정성이 시스템에 미치는 영향을 최소화할 수
있습니다.

이번 장에서는 시와의 대화를 통해 yahoo finance APIZ} 네이버뉴스 APIO 연동하는
BOS 생성하는 방법을 살펴보았습니다. SSAC 질문에서 시작하여 점진적으로

요구사항을 구체화하는 HSS 접근이 비개발자에게 특히 유용하다는 것을 확인할 수
있었습니다.

다음 장에서는 수집된 데이터를 분석하는 감성분석 모듈을 구현하는 SAO 대해
알아보겠습니다.

8. 감성 분석 모듈 구현

AIS 이용한 주식분석에서 감성 EAS 투자 ABO 중요한 SHS 제공합니다. 뉴스와
같은 텍스트 데이터에서 ASL 의견을 추출하여 주가 SSB 예측하는데 활용할 수
있기 때문입니다.

이번장에서는 주식분석 시스템의 핵심 기능 중 하나는 뉴스 데이터를 분석하여

감성(긍정/부정/중립)을 평가하고, 이것이 주가에 미칠 SHS 예측하는 것입니다. 시와의
대화를 통해 효과적인 감성 분석 모듈을 Pate 방법을 살펴보겠습니다.

1. 뉴스 데이터 전처리하기

네이버 APE 통해 가져온 뉴스 데이터는 1104[태그와 특수 문자가 포함되어 있어
그대로 분석에 사용하기 어렵습니다. 이를 전처리하는 방법에 대해 시와 대화를
나누었습니다.

저자: 네이버 APIZ 통해 가져온 뉴스 데이터는 11\Ｌ태그와 특수 문자에 대해 어떻게

처리해야 하나요?

Al: 네이버 APIZ 통해 가져온 뉴스 GO| HTML 태그, 특수문자, HTML 엔티티
등이 포함되어 있을 수 있습니다. 효과적인 감성 분석을 위해 이러한 요소들을
제거하거나 변환해야 합니다. BeautifulSoup 라이브러리를 사용하여 11\/Ｌ태그를


--------------------------------------------------

[페이지 36]
제거하고, 흔히 볼 수 있는 HTMLAMUEC|E|S 적절한 SAS 변환합니다. 이렇게 정제된

HAGE 감성 분석 모델에 더 적합한 입력이 됩니다.

저자: 이 함수를 어떻게 활용하면 좋을지 실제 네이버 APIA, 가져온 뉴스 데이터를
처리하는 예시를 보여주세요

시: 네이버 APIOWAY 가져온 뉴스 데이터를 처리하는 예시는 다음과 같습니다.

위와 같은 대화 후 시는 뉴스 데이터를 전처리 하는 함수를 포함하여 다음과 같은

소스코드를 보여주었습니다.

def fetch_stock_news(query):
"네이버 검색 APE 사용하여 주식 관련 최신 AS 검색합니다."

# 네이버 API 인증 정보 및 요청 설정

#aPl 요청 및 응답 처리
response = urllib.request.urlopen(request)
response_body = response.read()

news_data = json.loads(response_body.decode(‘utf-8'))

articles = []

if ‘items’ in news_data and news_data['items’):
# 각 뉴스 아이템에서 필요한 정보 추출
for item in news_data['items')[:5]: # 최대 5개만 사용
# HTML 태그 제거 및 특수 문자 처리

title = clean_text(item['title’])

# 기사 정보 저장
articles.append({
"title": title,
"url": itemf['link’],
"date": format_date(item['pubDate'})

»

return articles

except Exception as e:

print('+#+~ 검색 중 오류 Be: {str(e)}")

return []


--------------------------------------------------

[페이지 37]
이 코드는 네이버 &미로부터 받은 11\Ｌ태그와 특수 문자가 포함된 뉴스 제목을
Clean texti=S 통해 전처리합니다. 전처리된 ASS URL} 날짜 정보와 SA articles
리스트에 저장되어 이후 분석에 사용됩니다.

우리의 주식분석 시스템에서 뉴스 기사 검색은 핵심기능중에 하나로 뉴스 데이터
전처리는 감성 분석의 정확도에 직접적인 영향을 미치는 중요한 단계입니다. 만약
1114[태그나 특수 문자가 남아있으면 LIMO] 텍스트의 의미를 정확히 이해하기 어렵기

문입니다. 이렇게 전처리된 뉴스 데이터는 다음 단계인 감성 분석 프롬프트에 입력으로
사용됩니다.

2. UMS 위한 감성 분석 프롬프트 설계

효과적인 감성 분석을 위해서는 ＬＬ\/에게 적절한 AAS 제공하는 프롬프트 설계가
중요합니다. 이에 대해 시와 다음과 같은 대화를 나누었습니다.

저자 : 전처리된 뉴스를 UMS 활용한 감성 BAB 하고 싶습니다. 효과적인

프롬프트는 어떻게 설계해야 할까요?

시: LLIMS 활용한 감성 분석을 위한 효과적인 프롬프트 설계는 정확하고 유용한 결과를
얻는데 매우 중요합니다. 다음과 같은 요소를 고려한 프롬프트를 설계할 수 있습니다.
- 명확한 지시: UMA] 정확히 SAS 분석하고 어떤 형태로 결괄르 제공해야
하는지 명확하게 지시합니다.

- PASE 출력 요청: 분석 결과를 정형화된 형식으로 요청하여 일관된 결과를
얻습니다.
- 맥락제공: 회사명, 산업 Sol 맥락 SHS 제공하여 더 정확한 BAO]
가능하게 합니다.
- 평가 기준 명시: 감성을 어떤기준으로 평가해야 하는지 명확히 합니다.
- 구체적인 출력 요소 지정: 전반적 감성, 근거, 주가 영향 등 필요한 분석
요소를 명시합니다.
이를 고려한 감성 분석 프롬프트 예시는 다음과 같습니다.
sentiment_analysis_prompt = PromptTemplate(
input_variables=["company_name", "news_summary"],
template="""
CES {company_name}Ol| 관한 뉴스 요약입니다:

{news_summary}

위 내용의 감성(긍정/부정)을 분석하고, 주가에 미칠 영향을 평가해주세요.

다음 형식으로 한국어(한글)로 답변해주세요:

1. 전반적 감성:[긍정/부정/중립]
2. 감성 분석 근거:[뉴스에서 발견된 긍정적/부정적 요소]

3. 예상 주가 영향:[상승/하락/유지 전망과 그 이유]


--------------------------------------------------

[페이지 38]
이 프롬프트는 회사명과 뉴스 요약을 입력으로 받아, 감성 분석 결과를 구조화된
형식으로 반환하도록 요청합니다.

저자: 프롬프트에서 전반적 감성, 감성 분석 근거, 예상 주가 영향에 대해 근거에 대한

확신을 갖도록 수정해주세요

시: 네, 감성의 SSM 확신도는 투자 결정에 중요한 요소입니다. 이를 포함한
프롬프트는 다음과 같이 설계할 수 있습니다.

enhanced_sentiment_analysis_prompt = PromptTemplate(
input_variables=["company_name", "news_summary"],
template="""
다음은 {company_name}Ol] 관한 FA 요약입니다:

{news_summary}

위 내용의 감성을 분석하고, 주가에 미칠 SHS 평가해주세요.

다음 형식으로 한국어(한글)로 답변해주세요:

1. 전반적 감성: [긍정/부정/중립]
- 감성 강도:[매우 약함/약함/보통/강함/매우 강함]

- 분석 확신도:[낮음/중간/높음

2. 감성 분석 근거:
- 긍정적 요소:[뉴스에서 발견된 긍정적 요소]

- 부정적 요소: [뉴스에서 발견된 부정적 요소]

3. 예상 주가 영향:
- 방향: [상승/하락/유지]
- 영향 정도: [미미함/약함/중간/강함/매우 강함]
- 시간 프레임: [단기(1주일 이내)/중기(1-3개월)/장기(3개월 이상)]

이런 프롬프트는 감성의 강도(매우 약함부터 매우 강함까지)와 분석에 대한

확신도(낮음/중간/높음), 그리고 주가 영향의 정도와 시간 프레임까지 포함하여 더
상세한 분석 결과를 얻을 수 있습니다. 투자자들은 이러한 세부정보를 통해 더 정교한
투자 결정을 내릴 수 있습니다.

이렇게 시와의 대화를 바탕으로 감성 분석 프롬프트를 구현했습니다. 이 프롬프트는
시와의 대화에서 논의한 기본적인 PAS 구성되어 있습니다. 주요 특징은 다음과
같습니다.

- 입력변수: 000ㅁ0080_03006(회사명)과 news_summary(7ARH) 두가지 변수

입력으로 받습니다.


--------------------------------------------------

[페이지 39]
- 명확한 지시: "Ass 분석하고, 주가에 미칠 영향을 평가" 하라는 명확한
지시가 포함되어 있습니다. 이부분은 사용자의 입장에서 수정이 가능합니다.

- 구조화된 출력형식: 세가지 항목(전반적 감성, 감성 분석 근거, 예상 주가
영향)으로 구성된 구조화된 출력을 요청합니다.

- HOA: SAYS 답변해주세요" 라고 명시하여 출력 언어를 지정합니다.

이러한 프롬프트 설계와 체인 구성을 통해, 뉴스 데이터로부터 구조화된 감성 분석
결과를 얻을 수 있습니다.

3. 감성 분석 결과 해석 및 활용하기

전 단계에서 감성 분석 결과를 얻었다면, 이를 어떻게 해석하고 활용할 수 있는지
알아보겠습니다. 이에 대해 시와 다음과 같은 대화를 나누었습니다.

저자: 뉴스 데이터 감서분석 결과를 얻은 후, 이를 재무 분석과 어떻게 연계하면

좋을까?

AL 감성 분석 결과를 재무 분석과 연계하면 더 종합적인 주식 분석이 가능합니다.
주식분석 시스템에서는 재무 분석 프롬프트에 감성 분석 결과를 입력으로 제공하는
방식을 사용할 수 있습니다. 이렇게 하면 LUMO] 재무 AH 뉴스 감성을 모두
고려하여 분석할 수 있습니다.

음은 재무 분석 프롬프트의 예시입니다.

financial_analysis_prompt = PromptTemplate(
input_variables=["company_name", "financial_data", "sentiment_result"],
template="""

{company_name}2| 재무 정보와 뉴스 감성 분석 결과를 종합적으로 분석해주세요.

재무 정보:

{financial_data}

뉴스 감성 분석 결과:

{sentiment_result}

위 정보를 바탕으로 {company_name}2| 재무 상태와 투자 관점에서의 시사점을
객관적인 지표와 데이터를 중심으로 분석해주세요.

다음 형식으로 한국어(한글)로 답변해주세요:

#\# 재무 지표 분석

(제공된 데이터에 있는 지표만 분석해주세요)

# 뉴스 및 감성 분석과의 연관성
- 최근 뉴스가 재무 상태에 미치는 영향:[객관적 분석]

- 뉴스 감성과 투자 관점의 연관성:[데이터 기반 분석]


--------------------------------------------------

[페이지 40]
# 투자 시사점
- 단기 관점 (3개월):[객관적 시사점]
- 중장기 관점 (6개월 이상): [객관적 시사점]

## 종합 평가
- 재무 건전성: [A+/A/B+/B/C+/C/D] (정량적 지표 기반)
- 투자 AS: [상/중상/중/중하/하] (정량적 지표 기반)

이런 방식으로 감성 분석 결과를 재무 분석에 통합함으로써, "뉴스 및 감성 분석과의
연관성" 섹션에서 뉴스가 재무에 미치는 영향과 투자 관점에서의 연관성을 분석할 수

시와의 대화를 바탕으로 감성 분석 결과를 재무 분석과 Stoo 소스를 구현했습니다.

시가 만들어준 소스를 살펴보겠습니다.

감성 분석 체인 실행

Analyze_stock 함수에서는 다음과 같이 감성 SAB 수행합니다.

#5.2 감성 분석

sentiment_result = sentiment_analysis_chain.invoke({
“company_name": company_name,
“news_summary": news_summary

))

sentiment_analysis = sentiment_result["text"]

여기서 news_summarye 앞서 FA 분석 체인을 통해 생성된 FA 요약입니다.

무 분석과의 통합

감성 분석 결과는 재무 분석에 다음과 같이 통합됩니다.

# 5.3 재무 분

financial_result = financial_analysis_chain.invoke({
“company_name": company_name,
“financial_data”: json.dumps(financial_data, ensure_ascii=False),
“sentiment_result": sentiment_analysis

»

financial_analysis = financial_result["text"]

재무 분석 프롬프트는 다음과 같이 정의했습니다.

financial_analysis_prompt = PromptTemplate(


--------------------------------------------------

[페이지 41]
"

input_variables=["company_name", "financial_data", "sentiment_result"],

template=

{company_name}2| 재무 정보와 뉴스 감성 분석 결과를 종합적으로 분석해주세요.

{financial_data}

뉴스 감성 분석 결과:

{sentiment_result}

위 정보를 YSO= (company_name}2| 재무 상태와 투자 관점에서의 시사점을
객관적인 지표와 데이터를 중심으로 분석해주세요.

다음 형식으로 한국어(한글)로 답변해주세요:

# 재무 지표 분석
(제공된 데이터에 있는 지표만 분석해주세요)
1. 수익성 지표:

- 순이익률: [수치]% (산업 평균: [수치]%)

- 806자기자본수익률): [수치]% (산업 평균: [수치]%)

생략

이 프롬프트는 특히 "뉴스 및 감성 분석과의 연관성"에서 뉴스 감성이 재무에 미치는
영향과 투자 관점에서의 연관성을 분석하도록 설계되어 있습니다. 이러한 설계는 감성
분석 결과가 재무 분석과 통합되어 더 SHA 투자정보를 제공하며, 사용자가 쉽게
이해할 수 있는 형태로 표시됩니다.

(0. 재무 분석 모듈 구현

재무 SAS 투자 결정에 있어 매우 중요한 역할을 합니다. 기업의 재무 상태, 수익성,
안정성 등을 평가하여 투자자에게 객관적인 정보를 제공하는 것이 목적입니다. 이번
장에서는 시를 활용하여 주식의 재무 데이터를 구조화하고, 이를 분석하여 의미 있는
통찰을 제공하는 방법을 살펴보겠습니다.

1. 재무 데이터 구조화하기
재무 분석을 위해서는 먼저 데이터를 체계적으로 구조화해야 합니다. 어떻게 재무
데이터를 구조화 할 Al 시에게 물어봤습니다.

저자: 주식 재무 분석을 위한 데이터를 어떻게 구조화하면 좋을까?

시: 주식 재무 분석을 위한 데이터 구조화는 여러 카테고리로 나누어 접근하는 것이
효과적입니다. 다음과 같은 주요 재무 지표들을 포함하는 것이 좋습니다:

1. 기본 정보
o 회사명, 종목코드

o 업종/섹터


--------------------------------------------------

[페이지 42]
o 현재 주가

ㅇ 시가총액

o 52주 최고/최저가

. 수익성 지표

ㅇ 순이익률(01 Margin)
o 자기자본수익률06)
o SAAB (ROA)

. 안정성 지표

o 유동비율(20601 Ratio)
o 부채비율(060『『3100)

o 이자보상비율(06665! Coverage Ratio)
. 가치 지표

o 주가수익비율(0/6

ㅇ 주가순자산비율(6/8)

ㅇ 주가매출비율(6/5)

o 배당수익률(2100600 Yield)
. 성장성 지표

o 매출 성장률

o 순이익 성장률

. 비교 데이터

o 산업 평균 비교 데이터
o 주요 경쟁사 데이터

이렇게 PASSA 종합적인 재무 분석이 가능해지며, 각 카테고리별로 깊이 있는

분석이 가능해집니다. 파이썬 딕셔너리나 클래스를 활용하여 이러한 구조를 구현할 수
있습니다.

산업 평균 데이터 활용하기

균 데이터는 해당 기업의 재무 상태를 평가하는 데 중요한 기준점을 제공합니다.
해

Al 애기해보았습니다.

저자: 산업 평균 데이터를 만들어서 입력한 기업의 재무상태를 객관적으로 평가할 수

있는 기준점을 만들고 싶습니다. 어떤식으로 만들어야 할까요

시: 산업 평균 데이터를 구성하는 좋은 방법입니다. 현재 다음과 같이 주요 산업

분야별로 데이터를 구성할 수 있습니다.
‘Technology’: {

‘profit_margin’: '15.2%',

‘current_ratio’: '2.7',

‘debt_ratio’: '0.41',

‘roe’: '16.8%',

‘pe_ratio’: '24.5'

‘Finance Services’: {
‘profit_margin’: '18.4%',
‘current_ratio’: '1.2',
‘debt_ratio’: '0.68',
‘roe’: '12.5%',

‘pe_ratio’: '13.8'

),

‘Consumer Cyclical’: {


--------------------------------------------------

[페이지 43]
‘profit_margin’: '8.3%',
‘current_ratio’: '1.8',
‘debt_ratio’: '0.52',
‘roe’: '14.2%',

‘pe_ratio’: '18.7'

‘Healthcare’: {

‘profit_margin’: '12.7%',

‘current_ratio’: '2.3',
‘debt_ratio': '0.47',
‘roe’: ‘15.1%’,

‘pe_ratio’: '22.4'

‘Communication Services’:

‘profit_margin’: '11.6%',
‘current_ratio’: '1.9',
‘debt_ratio’: '0.55',
‘roe’: '13.7%',

‘pe_ratio’: '20.2'

이 데이터는 2 산업별 주요 재무 비율의 평균값을 YEMIUC. 실제 분석 시에는
회사의 산업을 식별한 후, 해당 산업의 평균 데이터와 비교하여 상대적인 위치를
평가할 수 있습니다.

저자: 추가로 경쟁사 정보도 비슷한 방식으로 구성 가능할거 같은데 한국 주요
종목들에 대한 경쟁사 정보를 딕셔너리 형태로 구성해 주세요

시: 한국 주요 종목들에 대한 경쟁사 정보를 딕셔너리 PHS 구성하면 다음과 같이
구현할 수 있습니다.

competitors = {

005930: [ # 삼성전자
{'name': '5하이닉스, 10660: '000660.KS', 'pe_ratio': 18.2, 'roe': 10.5},
{iname’: 'LG@Af;, ‘ticker’: '066570.KS', ‘pe_ratio’: 12.1, ‘roe’: 8.3},
{'name’: '삼성90!', 'ticker': '006400.KS', 'pe_ratio': 30.4, ‘roe’: 9.7}

}

1035420': [ # NAVER
{'name’: '카카오', ‘ticker’: '035720.(9', 'pe_ratio': 28.7, 'roe': 11.2},
{'iname’: '삼성509', 'ticker': '018260.KS', '‘pe_ratio’: 14.3, ‘roe’: 9.8}

}

'000660':[ #ㅎ하이닉스

{'08006": '삼성전자', 'ticker': '005930.KS', 'pe_ratio’: 15.2, ‘roe’: 12.8},


--------------------------------------------------

[페이지 44]
{'080006': '삼성901', 'ticker': '006400.KS', 'pe_ratio’: 30.4, ‘roe’: 9.7}
1
068270 [ # 셀트리온
{'name’: '삼성바이오로직스', '10<6『: '207940.KS', 'pe_ratio': 42.3, ‘roe’: 7.2},

{name’: '한미약품', 'ticker': '128940.KS', 'pe_ratio’: 35.7, ‘roe’: 8.9}

이렇게 산업 평균 데이터와 경쟁사 SHS 구조화함으로써, 조금 더 BSAA 또 상세한

재무 분석이 가능해졌습니다.

3. 재무분석을 위한 효과적인 프롬프트 템플릿

이제 구조화된 재무 데이터를 시에게 효과적인 분석을 요청할 프롬프트 템플릿을
구성해보자

저자: LMS 활용해 재무 분석을 수행하려고 합니다. 프롬프트 템플릿을 작성해주세요

시: 재무 분석을 위한 효과적인 템플릿은 구조화된 지시사항과 분석해야 할 데이터를

명확하게 제시하는 것이 중요합니다. 다음과 같은 템플릿을 구성할 수 있습니다.

financial_analysis_prompt = PromptTemplate(

input_variables=["Company_name", "financial_data", "sentiment_result"],

template="""

{company_name}2| 재무 정보와 뉴스 감성 분석 결과를 종합적으로 분석해주세요.

재무 정보:

{financial_data}

뉴스 감성 분석 결과:

{sentiment_result}

위 정보를 바탕으로 {company_name}2| 재무 상태와 투자 관점에서의 시사점을
객관적인 지표와 데이터를 SACS 분석해주세요.

다

00

형식으로 한국어(한글)로 답변해주세요:

## 재무 지표 분석
(제공된 데이터에 있는 지표만 분석해주세요)
1. 수익성 지표:

- 순이익률: [수치]% (산업 평균:[수치]%)

- 808(자기자본수익률): [수치]% (산업 평균: [수치]%)

2. 안정성 지표:

- 유동비율: [수치] (산업 평균: [수치])

- 부채비율: [수치]% (산업 Bat: [FAI] %)


--------------------------------------------------

[페이지 45]
3. 가치 지표:
- 『/6(주가수익비율): [수치] (산업 평균: [수치])
- 배당수익률: [수치]%《

4. 시장 지표:
- 시가총액: [수치] 원
- 52주 최고/최저 대비 현재가: 현재가가 최고가의 [수치%, 최저가의 [수치]%

*\# 산업 내 위치
- 산업 내 재무 건전성 순위:[상위/중위/하위]
- 주요 경쟁사 대비 특징:[데이터 기반 분석]

#\ 뉴스 및 감성 분석과의 연관성
- 최근 뉴스가 재무 상태에 미치는 영향:[객관적 분석]

- 뉴스 감성과 투자 관점의 연관성:[데이터 기반 분석]

## 투자 시사점
- 단기 관점 (3개월):[객관적 시사점]
- 중장기 관점 (6개월 이상):[객관적 시사점]

- 재무 건전성: [A+/A/B+/B/C+/C/D] (정량적 지표 기반)
- 투자 WAYS: [상/중상/중/중하/하] (정량적 지표 기반)

주관적인 의견은 배제하고, 오직 데이터와 객관적 지표에 근거하여 분석해주세요.
없는 항목은 분석에서 제외해주세요.

)
이 템플릿을 사용하면

1. 분석 대상과 데이터를 명확히 제시하여 시 가 맥락을 이해하기 쉽게 합니다.
2. 원하는 출력 BAB 세부적으로 지정하여 일관된 형태의 분석 결과를 얻을 수
있습니다.
3. 단순 숫자 나열이 아닌 산업 평균, 경쟁사와의 비교 등 상대적 분석을
요청합니다.
4. 뉴스 감성 분석 결과와 재무 데이터를 연결하여 종합적인 분석을 유도합니다.
5. 객관적인 데이터에 근거한 분석을 강조하여 신뢰성 있는 결과를 얻도록 합니다.

이 템플릿을 130900810 의 LLMChain 과 함께 사용하면 구조화된 재무 분석 Bas

얻을 수 있습니다.
이러한 대화를 통해 재무 데이터를 분석하기 위한 효과적인 프롬프트 템플릿을

구성했습니다.

주식 분석 시스템 구축하기의 시와의 대화를 통해 생성한 전체 BoE 다음과 같습니다.

주식 분석 모듈 - 뉴스 수집, 감성 분석, 재무 분석 기능 제공


--------------------------------------------------

[페이지 46]
import os

import json

import pandas as pd

import yfinance as yf

from bs4 import BeautifulSoup
import requests

from langchain_openai import ChatOpenAl

from langchain.chains import LLMChain

from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

import re

from datetime import datetime

import urllib.request

import urllib.parse

import traceback

# 환경 변수 로드

load_dotenv()

def json_serializable(obj):

객체가 SONS 2 직렬화 가능하도록 변환합니다.
중첩된 딕셔너리와 리스트를 처리합니다.

Args:
obj: 변환할 객체 (딕셔너리, 리스트, 또는 기본 타입)

Returns:

JSON 직렬화 가능한 객체

if isinstance(obj, dict):
# 딕셔너리인 경우 4 값을 재귀적으로 처리
return {k: json_serializable(v) for k, v in obj.items()}
elif isinstance(obj, list):
# 리스트인 경우 4 항목을 재귀적으로 처리
return [json_serializable(item) for item in obj]
elif isinstance(obj, (str, int, float, bool, type(None))):
# 기본 JSON 타입은 그대로 반환
return obj
else:
# 기타 타입은 BABS 변환

return str(obj)


--------------------------------------------------

[페이지 47]
def clean_text(text):
“HTML 태그와 특수 문자 제거"
# 8684114150047을 사용하여 HTML 태그 제거
soup = BeautifulSoup(text, 'html.parser’)
text = soup.get_text()

# 네이버 APL 검색 결과에서 S 문자 처리

text = text.replace('&quot;’,, '"').replace('&apos;’, """).replace(‘&amp;’, '&')

text = text.replace(‘&lt;', '<').replace(‘&gt;’, '>')

return text

def fetch_stock_news(query):
"""네이버 검색 APIS 사용하여 주식 관련 최신 FAS 검색합니다."""
# 네이버 API 인증 정보
client_id = os.environ.get("NAVER_CLIENT_ID", "...")

client_secret = os.environ.get("NAVER_CLIENT_SECRET", "...")

# 결과 저장 리스트

articles = []

try:
print(f"4]O|4] APIZ ‘(query}! 관련 FAS 검색합니다…")

# 검색어 인코딩

encText = urllib.parse.quote(query)

# 뉴스 검색 401 400! (최신순 정렬, 10개 결과)
url = "https://openapi.naver.com/v1/search/news?query=" + encText +

"&display=10&sort=date"

# API 요청 설정
request = urllib.request.Request(url)
request.add_header("X-Naver-Client-Id", client_id)

request.add_header("X-Naver-Client-Secret", client_secret)

#API 요청 보내기
response = urllib.request.urlopen(request)

rescode = response.getcode()

if rescode == 200:
# 응답 데이터 읽기
response_body = response.read()

response_body str = response_body.decode(‘utf-8')

# JSON 데이터 파싱


--------------------------------------------------

[페이지 48]
news_data = json.loads(response_body_str)

# 검색 결과 항목 확인

if ‘items’ in news_data and news_data{'items’):

%H:%M:%S %z")

print(f"{len(news_dataf'items'])}7H°] 뉴스 검색 결과를 SUCH")

#2 뉴스 아이템에서 필요한 정보 추출

for item in news_dataf'items'][:5]: ＊ 최대 5개만 사용
#HTML 태그 제거 및 특수 문자 처리
title = clean_text(item['title’])
link = itemf'link’]

pub_date = item['pubDate']

# 날짜 형식 변환
try:
# 예: "Mon, 10 Apr 2023 10:30:00 +0900"

date_obj = datetime.strptime(pub_date, "%a, %d %b %Y

news_date = date_obj.strftime("%Y-%m-%d %H:%M")
except Exception as e:
ㅁ001("날짜 형식 변환 OF: {str(e)}")

news_date = pub_date # 원본 날짜 형식 유지

# 기사 정보 저장
articles.append({
"title": title,
“url”: link,
"date": news_date

)

00060"뉴스 추가: {406[:30]}… (mews_date})")
else:
0ㅁ00[("네이버 API 검색 결과에 FA SSO] 없습니다.")
else:

ㅁ0001("네이버 APL 요청 오류 AEC: {rescode}")

# 결과가 없으면 기본 메시지
if not articles:
print(f' 3: {query}O] 대한 FAS 찾을 + 없습니다.")
current_date = datetime.now().strftime("%Y-%m-%d")
articles = [{
“title: f'{query}O] 대한 최신 FAS 찾을 수 없습니다",
“url": "https://news.naver.com/",

"date": current_date


--------------------------------------------------

[페이지 49]
ㅁ00010"종 (1800(3004069)}개의 뉴스 BSB 찾았습니다.")

return articles(:5] # 최대 5개까지만 반환

except Exception as 6:

print" BAY 중 오류 발생: {90(6)}")

print(traceback.format_exc())

# OF 발생 시 기본 뉴스 반환

current_date = datetime.now().strftime("%Y-%m-%d")

return [{

“title: f{query}O 대한 뉴스를 검색하는 중 오류가 발생했습니다",

"00": "https://news.naver.com/",

"date": current_date

# 재무 정보 수집 함수

def fetch_financial_data(ticker):

"특정 종목의 상세 재무 정보를 가져옵니다."

try:

# 한국 주식인 경우 Ks’ 접미사 주가

if isinstance(ticker, str) and ticker.isdigit() and len(ticker) == 6:

ticker = f"{ticker}.KS"

stock = yf.Ticker(ticker)

# 기본 정보

try:

info = stock.info

except:

# 정보 가져오기 실패 Al 기본값 설정

info = {

"shortName": "종목코드 {ticker}",

"sector": "Technology",

“currentPrice": 50000,

“marketCap": 500000000000,
“fiftyTwoWeekHigh": 60000,

“fiftyTwoWeekLow": 40000

# 예시 MS 비율 (실제 데이터가 없는 경우 대체)

financial_ratios = {

‘profit_margin': info.get(‘profitMargins', 8.5) * 100 if info.get(‘profitMargins')

else 8.5, # 예시 SOLAS (%)


--------------------------------------------------

[페이지 50]
‘current_ratio’: info.get(‘currentRatio’, 2.7), # 예시 유동비율

‘debt_ratio’: info.get(‘debtToEquity’, 32.4) / 100 if info.get('debtToEquity’)

else 32.4,  * 예시 부채비율 (%)
‘roe’: info.get(‘returnOnEquity’, 12.8) * 100 if info.get(‘returnOnEquity’) else
# 예시 자기자본수익률 (%)
‘pe_ratio’: info.get(‘trailingPE’, 15.2), # 예시 또는 실제 P/E 비율

‘ps_ratio’: info.get(‘priceToSalesTrailing12Months', 2.3), # 예시 또는 실제

‘dividend_yield': info.get(‘dividendYield’, 0.02) * 100 if
info.get(‘dividendYield’) else 2.0, # 예시 또는 실제 배당수익률 (%)

‘volatility’: 18.5 # OA] 변동성 (%)

# 섹터 평균 데이터

sector = info.get('sector’, Technology’)

sector_averages = {

‘Technology’: {

‘profit_margin’: 15.2,
‘current_ratio’: 2.5,
‘debt_ratio’: 35.0,
‘roe’: 18.5,

‘pe_ratio': 25.4

}

‘Financial Services': {
‘profit_margin’: 22.3,
‘current_ratio’: 1.3,
‘debt_ratio': 58.0,
‘roe’: 12.1,
‘pe_ratio': 15.2

}

‘Consumer Cyclical’: {
‘profit_margin’: 8.7,
‘current_ratio’: 1.8,
‘debt_ratio': 42.0,
‘roe’: 14.3,

‘pe_ratio': 22.1

}

‘Healthcare’: {
‘profit_margin': 12.5,
‘current_ratio’: 2.2,
‘debt_ratio': 32.0,
‘roe’: 15.8,

‘pe_ratio': 28.3


--------------------------------------------------

[페이지 51]
‘Communication Services’: {                                                                                        ‘005930: [ # 삼성전자
‘profit_margin’: 11.8,                                                                                                                                                                                                   {'name’: '5\하이닉스', ‘ticker’: '000660.KS', ‘pe_ratio': 18.2, ‘roe’: 10.5},
‘current_ratio’: 1.9,                                                                                            {'name:: 'LG@ Zt’, ‘ticker’: '066570.KS', 'pe_ratio’: 12.1, ‘roe’: 8.3},
‘debt_ratio’: 38.0,                                                                                                    {'name’: '4} SDI’, ‘ticker’: '006400.KS', 'pe_ratio': 30.4, ‘roe’: 9.7}
‘roe’: 13.7,                                                                                                           }
‘pe_ratio': 20.5                                                                                                      '035420':[ # NAVER

{'name:: '카카오', ‘ticker’: '035720.KS', 'pe_ratio': 28.7, ‘roe’: 11.2},

{'name': '삼성509', ‘ticker’: '018260.KS', 'pe_ratio’: 14.3, ‘roe’: 9.8}

1
# 기본값 설정                                                                             '000660':[ #5(하이닉스
default_sector_avg = {                                                                                              {iname': '삼성전자', ‘ticker’: '005930.KS', 'pe_ratio': 15.2, ‘roe’: 12.8},
‘profit_margin’: 10.0,                                                                                                  {'name’: '€$ SDI’, ‘ticker’: '006400.KS', 'pe_ratio': 30.4, ‘roe’: 9.7}
‘current_ratio’: 2.0,                                                                                                                 )
‘debt_ratio’: 40.0,                                                                               ‘068270: [| # 셀트리온
‘roe’: 15.0,                                                                                                       {'name:: '삼성바이오로직스', '10<6「: '207940.KS', 'pe_ratio’: 42.3, ‘roe’:
‘pe_ratio': 20.0                                                                                                     7.2},
{'name’: '한미약품', ‘ticker’: '128940.KS', 'pe_ratio': 35.7, ‘roe’: 8.9}
]
sector_avg = sector_averages.get(sector, default_sector_avg)                                                  }
# 주요 SBA 데이터 (고정 데이터)                                                   #110<6에서 '(9' 제거하여 경쟁사 검색

competitors = {                                                                                                ticker_base = ticker-split(’.’)[0]


--------------------------------------------------

[페이지 52]
result = {

"company_name": info.get("shortName”, 『"종목코드 {ticker}"),

"ticker": ticker,

"sector": sector,

“current_price”: info.get("currentPrice", 50000),

“market_cap": info.get("marketCap", 500000000000),

"52w_high": info.get("fiftyTwoWeekHigh", 60000),

"52w_low": info.get("fiftyTwoWeekLow", 40000),

"financial_ratios": financial_ratios,

“sector_averages”: sector_avg,

“competitors”: competitors.get(ticker_base, []),
“analyst_recommendations": info.get("recommendationMean", 2.5),
“forward_pe”: info.get("forwardPE", financial_ratios['pe_ratio’] * 0.9),

"dividend_yield”: financial_ratios[‘dividend_yield’]

return result

except Exception as e:
print MS 정보 수집 중 오류 발생: (str(e)}")
print(traceback.format_exc())

# 오류 발생 시 기본 데이터 반환

return {

"“company_name": 『"종목코드 {ticker}",

"ticker": ticker,

"sector": "Technology",

“current_price”: 50000,

“market_cap": 500000000000,

"52w_high": 60000,

"52w_low": 40000,

“financial_ratios": {
‘profit_margin’: 8.5,
‘current_ratio’: 2.7,
‘debt_ratio': 32.4,
‘roe’: 12.8,
‘pe_ratio’: 15.2,
‘ps_ratio’: 2.3,
‘dividend_yield’: 2.0,
‘volatility’: 18.5

}

“sector_averages": {
‘profit_margin': 10.0,
‘current_ratio’: 2.0,

‘debt_ratio’: 40.0,


--------------------------------------------------

[페이지 53]
‘roe’: 15.0,
‘pe_ratio': 20.0
}

“competitors”: []

# 프롬프트 정의

news_analysis_prompt = PromptTemplate(
input_variables=["company_name", "news_data"],
template="""

{company_name}Oj] 대한 최신 FAS 분석해주세요.

아래는 {company_name}O] 대한 최신 뉴스 목록입니다:

{news_data}

위 FASS 종합하여 {company_name}2| 최신 SHB 간략히 요약해주세요.

반드시 한국어(한글)로 답변해주세요.

sentiment_analysis_prompt = PromptTemplate(

input_variables=["Company_name", "news_summary"],

template="""
음은 {company_name}0l| 관한 뉴스 요약입니다:

{news_summary}

위 내용의 감성(긍정/부정)을 분석하고, 주가에 미칠 SFB 평가해주세요.

다음 형식으로 한국어(한글)로 답변해주세요:

1. 전반적 감성: [긍정/부정/중립]
성 분석 근거:[뉴스에서 발견된 긍정적/부정적 요소]

주가 영향:[상승/하락/유지 전망과 그 이유]

N
2 wW

ox

w

financial_analysis_prompt = PromptTemplate(
input_variables=["company_name", "financial_data", "sentiment_result"},
template="""

{company_name}2| 재무 정보와 뉴스 감성 분석 결과를 종합적으로 분석해주세요.

{financial_data}

뉴스 감성 분석 결과:


--------------------------------------------------

[페이지 54]
{sentiment_result}

위 정보를 바탕으로 {company_name}2| 재무 상태와 투자 관점에서의 시사점을
객관적인 지표와 데이터를 중심으로 분석해주세요.

다음 형식으로 한국어(한글)로 답변해주세요:

## 재무 지표 분석
(제공된 데이터에 있는 지표만 분석해주세요)
1. 수익성 지표:

- 순이익률:[수치]% (산업 평균:[수치]%)

- 806(자기자본수익률): [수치]% (산업 평균: [수치]%)

. 안정성 지표:
- 유동비율: [수치] (산업 평균: [수치])
- 부채비율: [수치]% (산업 평균:[수치]%)

. 가치 지표:
- P/E AEE YB): [수치] (산업 평균: [수치]
- 배당수익률: [수치]%

. 시장 지표:

- 시가총액: [수치] 원

- 52주 최고/최저 대비 현재가: 현재가가 최고가의 [수치]%, 최저가의 [수치]%

## 산업 내 위치
- 산업 내 재무 건전성 순위:[상위/중위/하위]

- 주요 경쟁사 대비 특징: [데이터 기반 분석]

# 뉴스 및 감성 분석과의 연관성
- 최근 뉴스가 재무 상태에 미치는 영향: [객관적 분석]

뉴
- 뉴스 감성과 투자 관점의 연관성:[데이터 기반 분석]

## 투자 시사점
- 단기 관점 (3개월): [객관적 시사점]
- 중장기 관점 (6개월 이상):[객관적 시사점]

## 종합 평가
- 재무 건전성: [A+/A/B+/B/C+/C/D] (정량적 지표 기반)
- 투자 MAS: [상/중상/중/중하/하] (정량적 지표 기반)

주관적인 의견은 배제하고, 오직 데이터와 객관적 지표에 근거하여 분석해주세요.

제공된 데이터에 없는 SSS 분석에서 제외해주세요.


--------------------------------------------------

[페이지 55]
except:
# 주식 분석 함수                                                                              # 0103066에서 회사명을 가져올 수 없을 경우 기본값 설정

def analyze_stock(ticker, company_name=None):                                                                               company_name = +"종목코드 {ticker}"

주식 SSB 분석하고 결과를 반환합니다.                                                        # 한국 주식 종목코드별 SING 매핑 (주요 종목)
kr_stock_names = {
Args:                                                                                                                                                                                                                                                  "005930": "삼성전자",
ticker (str): 주식 종목 코드 (예:'005930'                                                         "000660": "95\하이닉스",
company_name (str, optional): 회사 이름. 제공되지 않으면 자동 조회합니다.                                "035420": "NAVER",
"035720": "카카오",
Returns:                                                                                                                                 "051910": "16화학",
미대 분석 결과를 포함하는 사전                                                                  "207940": "삼성바이오로직스",
"006400": "삼성901",
"068270": "셀트리온",
#Ｌㄴ4 설정                                                                                                     "000270": "기아",

10 = ChatOpenAl(temperature=0.1, model="gpt-4")                                                             "005380": "현대차"

#1. 회사 이름 확인
if not company_name:                                                                  # 매핑된 회사명 있으면 AS
try:                                                                                                                                          if ticker in kr_stock_names:
stock = yf.Ticker(ticker)                                                                                         company_name = kr_stock_names|ticker]

company_name = stock.info.get("shortName”, ticker)


--------------------------------------------------

[페이지 56]
news_data = fetch_stock_news(company_name)

# 3. 재무 정보 수집

financial_data = fetch_financial_data(ticker)

#4, 체인 생성

news_analysis_chain = LLMChain(
IIm=tllm,
prompt=news_analysis_prompt,

verbose=False

sentiment_analysis_chain = LLMChain(
IIlm=tllm,
prompt=sentiment_analysis_prompt,

verbose=False

financial_analysis_chain = LLMChain(
lim=lim,

prompt=financial_analysis_prompt,

verbose=False

news_result = news_analysis_chain.invoke({
“company_name": company_name,
"news_data": json.dumps(news_data, ensure_ascii=False)
»

news_summary = news_result["text"]

#52 감성 분석

sentiment_result = sentiment_analysis_chain.invoke({
“company_name": company_name,
"news_summary": news_summary

)

sentiment_analysis = sentiment_result["text"]

#53 재무 분석
financial_result = financial_analysis_chain.invoke({
“company_name": company_name,

"financial_data": json.dumps(financial_data, ensure_ascii=False),


--------------------------------------------------

[페이지 57]
“sentiment_result": sentiment_analysis

»

financial_analysis = financial_result["text"]

# 6. 결과 반환
# 뉴스 제목 목록 생성

ㅁ6\5.110465 = []

"sentiment_analysis": sentiment_analysis,

“financial_analysis": financial_analysis,

"raw_data": json_serializable({
“news_data": news_data,
“financial_data": financial_data

»,

"status": "success"

if isinstance(news_data, list):                                                                                            }
for item in news_data:
if isinstance(item, dict) and ‘title’ in item:                                                                return result
# 날짜 추가                                                                                    except Exception as 6:
if ‘date’ in item and item['date’]:                                                       0001("분석 중 오류 발생: {str(e)}")
news _titles.append(f"{item|'title’]} ({item['date’]})")                                                     print(traceback.format_exc())
else:                                                                                                       return {
news_titles.append(item|'title’])                                                                                          "ticker": ticker,
"“company_name": company_name if company_name else f*'S 525
# 결과를 JSON 직렬화 가능한 SHS 변환                                           {ticker}",
result = {                                                                                                                “error”: str(e),
"ticker": ticker,                                                                                                           "status": "error"

"“company_name": company_name,                                                                                                 }

"news _titles": news_titles,

"news_summary”: news_summary,


--------------------------------------------------

[페이지 58]
4장 웹 인터페이스 개발

A. Flask#] 서버 구축하기

웹 인터페이스는 사용자가 주식 분석 기능을 쉽게 이용할 수 있게 해주는 중요한

요소입니다. 이번절에서는 『135( 프레임 HAS 활용하여 주식 분석 A MHS 구축하는
SAS 살펴보겠습니다. 『135(는 파이썬 기반의 경량 웹 프레임워크로, 간단하면서도
강력한 웹 어플리케이션을 개발할 수 있습니다.

1. 시에게 웹 서버 개발 요정하기
다음과 같이 저자는 시에게 웹 서버 ASS 요청을 해보았습니다.

저자: 주식분석 모듈을 웹으로 서비스하려고 합니다. 어떻게 구성하면 좋을까요?

시: 주식분석 SSS 웹 인터페이스로 제공하기 위해 FlaskS 이용한 어플리케이션을
설계해 드리겠습니다. 다음과 같은 구성을 추천합니다.
- 기본 구조

Flask 어플리케이션 초기화

환경 변수 설정

라우트 설정

주요 엔드포인트

/: 메인페이지

/analyze: 주식 분석 4미엔드포인트

/health: 서버 상태 확인용 엔드포인트

종목코드 입력처리
분석 요청 처리 및 결과반환
오류 처리 및 사용자 피드백
해당 구성으로 구현을 시작해볼까요?

저자: 위에서 설명한 구성으로 기본 구조부터 구현을 시작해주세요. 제가 생각하고 있는
웹페이지는 한페이지에서 주식 종목을 입력하면 해당 페이지에 분석 결과를 표시하는
방식으로 만들면 좋겠습니다.

Al 알겠습니다. 단일 페이지 웹 어플리케이션으로 구성하겠습니다.『135
어플리케이션의 기본 구조를 작성해보겠습니다.

주식 분석 웹 애플리케이션
import os

import json

from flask import Flask, request, jsonify, render_template_string
from dotenv import load_dotenv

from src.stock_analyzer import analyze_stock


--------------------------------------------------

[페이지 59]
# 환경 변수 로드                                                                        def index():
load_dotenv()                                                                         "메인 페이지"""

#HIML 템플릿 렌더링 (여기서는 간략화된 예시)

# Flask Q 초기화                                                                                     return render_template_string("""
app = Flask(_name_)                                                                                              <html>
<head>
# 주요 한국 주식 종목코드 매핑                                                                                                     stitle> FAY 분석 시스템</06>
KR_STOCK_NAMES = {                                                                                               <style>
"005930": "삼성전자",                                                                             /* 기본 스타일 *
"000660": "9(하이닉스",                                                                                                                  body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;
"035420": "NAVER",                                                                                                     padding: 20px; }
"035720": "카카오",                                                                                                               h1 { text-align: center; }
"051910": "Ｌ6화학",                                                                                                                                                                                                                     orm-group { margin-bottom: 15px; }
"207940": "삼성바이오로직스",                                                                                                        label { display: block; margin-bottom: 5px; }
"006400": "삼성901",                                                                                                                input { width: 100%; padding: 8px; box-sizing: border-box; }
"068270": "셀트리온",                                                                                                                       button { padding: 10px 15px; background-color: #4CAFS5O; color: white;
"000270": "기아",                                                                                                   border: none; cursor: pointer; }
"005380": "현대차"                                                                                                                     #result { margin-top: 20px; }

.loading { display: none; text-align: center; margin: 20px 0; }
error { color: red; display: none; margin: 10px 0; }
# 라우트 정의                                                                                 </style>

@app.route('/'", methods=['GET'})                                                                                                                                    </head>


--------------------------------------------------

[페이지 60]
<body>

<hi>#Al 분석 시스템</111>

<div>
<13>주요 종목코드</113>
<div id="stockCodes">
<!-- 종목코드 정보가 7/0] 삽입됩니다 -->
</div>

</div>

<form id="analysisForm">

<div class="form-group">
<label for="ticker"> SS D£&:</label>
<input type="text" id="ticker" required placeholder="0l: 005930">

</div>

<div class="form-group" >
<label for="companyName">S|A}S (414 AtSt):</label>

<input type="text" id="companyName" placeholder="04l:

삼성전자">

<button type="submit" >446}7| </button>

</form>

<div id="error" class="error"> </div>
<div id="loading" class="loading">#44 &...</div>

<div id="result" > </div>

<script>
// 종목코드 정보 표시
const stockCodesDiv = document.getElementByld(‘stockCodes’);

const stockCodes = {{ stock_codes|tojson }};

let stockCodesHTML = ";

for (const [code, name] of Object.entries(stockCodes)) {
stockCodesHTML += “<div> ${code}: ${name}</div>’;

}

stockCodesDiv.innerHTML = stockCodesHTML;

// 폼 제출 처리

document.getElementByld(‘analysisForm').addEventListener(‘submit’,

async function(e) {

e.preventDefault();


--------------------------------------------------

[페이지 61]
const ticker = document.getElementByld(‘ticker').value;
const companyName =

document.getElementByld('companyName’).value;

// 초기화

document.getElementByld(‘error’).style.display = ‘none’;

document.getElementByld(‘loading’).style.display = ‘block’;

document.getElementByld(‘result’).innerHTML = ";

try {
// APL 호출
const response = await fetch('/analyze'’, {
method: 'POST',
headers: {‘Content-Type’: ‘application/json’},
body: JSON.stringify({
ticker: ticker,

company_name: companyName || undefined

if (tresponse.ok) {

throw new Error(A{H] 오류: ${response.status}’);

const data = await response,json();

if (data.status === error’) {

throw new Error(data.error | '분석 중 257}

발생했습니다.';

// 결과 표시

displayResults(data);

} catch (error) {

document.getElementByld(‘error’).textContent = errormessage;

document.getElementByld(‘error’).style.display = ‘block’;

} finally {

document.getElementByld(‘loading’).style.display = 'none’;

);

// 결과 표시 함수


--------------------------------------------------

[페이지 62]
function displayResults(data) {

// 결과 HTML 생성 및 표시 로직

let html = *<h2>${data.company_name} (${data.ticker}) 분석

// 뉴스 제목 목록
if (datanews_titles && data.news_titles.length > 0) {
html += '<div><h3>4|4! 4A</h3><ul>';
data.news titles.forEach(title => {
html += *<li>${title}</li>*;
»;

html += '</ul> </div>’;

// 나머지 분석 결과 섹션들
html += °
<div>
<h3>5A 요약</13>
<p> ${data.news_summary}</p>
</div>
<div>

<113>감성 BA </h3>

<p> ${data.sentiment_analysis}</p>
</div>
<div>

<13>재무 HA </h3>

<p> ${data.financial_analysis}</p>

</div>

document.getElementByld(‘result').innerHTML = html;

}
</script>
</body>
</html>

가, stock_codes=KR_STOCK_NAMES)

@app.route('/analyze’, methods=['POST’))
def analyze():

"분석 ap] OC ZO) En
try:

data = request.json

if not data or ‘ticker’ not in data:


--------------------------------------------------

[페이지 63]
return jsonify({"status": "error", "error": "종목 코드(00660가 필요합니다"),

ticker = data.get('ticker’)

company_name = data.get(‘company_name’)

#24 실행

result = analyze_stock(ticker, company_name)

return jsonify(result)

except Exception as e:

return jsonify({"status": "error", "error": str(e)}), 500

@app.route('/health', methods=['GET’))
def health_check():

"서버 상태 확인"

return jsonify({"status": "healthy", "message": "서버가 정상 작동 중입니다")

# 애플리케이션 실행
if _name_ == '_main_':

port = int(os.environ.get('PORT', 5000))

app.run(host='0.0.0.0', port=port, debug=True)

ALE 위와 같이 AAS 웹서버의 기본 PA AAS 작성해 주었다. 기본 구조는 다음

요소를 포함하고 있습니다.

- 주요 데이터 정의 : 한국 주식 종목코드 매핑

폼 제출 처리, APRS 처리, 결과 및 오류 포시

- 어플리케이션 실행 설정: 호스트, 포트, 디버그 모드 설정 등

시가 설계해준 이 기본 PAS 기반으로 세부 기능을 주가하고 확장할 수 있습니다.

2. &미엔드포인트 설계 및 구

rot

Flask 웹 서버의 핵심은 APIMCZAIS 설계입니다. 다음은 주식 분석 웹 어플리케이션에

필요한 주요 엔드포인트(/, /analyze, /health)2} 그 구현 방법입니다.

저자: 이제 API 엔드포인트를 구체적으로 SAS 차례입니다. 각각의 엔드포인트들은
어떻게 설계해야 할까요

시: 주식분석 시스템을 위한 ^ 엔드포인트는 다음과 같이 설계할 수 있습니다.


--------------------------------------------------

[페이지 64]
- 기본 페이지 엔드포인트('/)
메서드: 66ㅁㅠ
기능: 웹 인터페이스 제공
파라미터: 없음

반환: HTML 페이지

분석 엔드포인트(/3021/26)
메서드: 0057
기능: 주식 분석 수행
파라미터: 주식종목 Bl (ticker), 회사이름(6000080_03006)

반환: 15044형태의 분석 결과

"1060: "005930",

"company_name": "삼성전자",
“news titles": ["뉴스 제목 1", "뉴스 제목 2", ],
"news_summary": "뉴스 요약 내용",

"sentiment_analysis": "감성 분석 결과…",
“financial_analysis": "재무 분석 결과",

"status": "success"

Ol E (‘/health’)

메서드: GET

기능: 서버 상태 확인
파라미터: 없음

반환: JSON({"status": "healthy", "message": "Server is running"})

이러한 엔드포인트 SAS woe Flask APES 구현하겠습니다.

@app.route('/health', methods=['GET’])

def health_check():

"서버 상태 확인 엔드포인트"

return jsonify({"status": "healthy", "message": "Server is running"})

@app.route('/analyze’, methods=['POST’])

def analyze():

"주식 분석 OC Ol Em

try:

data = requestjson

if not data or ‘ticker’ not in data:

return jsonify({"error": "SS D&(ticker)7} 필요합니다", "status": "error’}),


--------------------------------------------------

[페이지 65]
ticker = data['ticker']                                                                                                return jsonify(result)
company_name = data.get(‘company_name’)                                                                 except Exception as e:
print'Z4 요청 처리 중 오류 Be: {str(e)}")

분석 실행                                                                                            return jsonify({"error": str(e), "status": "error"}), 500

result = analyze_stock(ticker, company_name)

@app.route('/', methods=['GET’])
# 15044 직렬화 가능한지 확인                                                  def 1006%0:
try:                                                                               """기본 엔드포인트"""
# 오류 발생 가능성이 있는 모든 필드를 문자열로 변환                                # 종목코드 매핑을 HTMLE 변환
for key in result.get(‘raw_data’, {}).keys():                                                                stock_mapping_html = ""
if not isinstance(result['raw_data'][key], (str, int, float, bool, list, dict,                               for ticker, name in KR_STOCK_NAMES.items():
type(None))):                                                                                                          stock_mapping_html += f"<div class='stock-item'> <span

result['raw_data'][key] = str(result['raw_data'][key])                                      class='ticker' >{ticker}</span>: <span class='company'>{name}</span> </div>"

# 테스트로 1504 직렬화 시도                                                      #HTML 템플릿 반환 (여기서는 간략화)
json.dumps(result)                                                                                     return render_template_string("""
except Exception as e:                                                                                               <html>
# 직렬화 중 오류 발생 시, rawdata BE 제거                                            <head>
print(f'JSON 직렬화 오류: {str(e)}")                                                    <1116>주식 분석 시스템</116>
if 'raw_data’ in result:                                                                                 <!-- CSS 스타일 생략 -->
del result[‘raw_data’]                                                                                   </head>

<body>


--------------------------------------------------

[페이지 66]
<111>주식 분석 시스템</11>

<div class="content">
<div class="stock-mapping">
<h3>#2 한국 주식 종목코드</113>
<div class="stock-items">
+ stock_mapping_html + """

</div>

</div>

<div class="analysis-form">
<!-- 폼 구현 생략 -->

</div>

<div id="result" class="result-container" > </div>

</div>

<!-- JavaScript 구현 생략 -->

시가 설계한 엔드포인트에서 주목할 점은 다음과 같습니다.
- 1177『메서드 선택: 데이터 조회는 GET, 분석 요청과 같은 AAS posts
사용합니다.
- 적절한 상태 코드: 성공시 200, 클라이언트 오류시 400, 서버 오류시 500 등의
HTTPAEY BOS 반환합니다.
- 일관된 응답형식: 모든 &미응답은 150형식으로 통일하고, 3105 필드를
포함하여 결과 상태를 명확히 합니다.
- JSON4 SS} 처리: 분석 결과 중 150씨으로 직렬화할 수 없는 객체가 있을
경우, BASS 변환하거나 필요시 BOS 제거합니다.

3. 에러 처리와 사용자 피드백
AIS 통해 구성한 웹 어플리케이션에서 에러처리와 사용자 CWS 사용자 Sas
APOE 중요한 요소입니다. 구현된 AAO} 대해서 효과적인 에러 처리 SAS 어떻게
되어 있는지 시에게 질의했습니다.

저자: 우리가 구현한 웹 어플리케이션에서 어떠한 에러 처리방법이 사용되었나요

시: 주식분석 웹 어플리케이션에서는 사용자 경험 향상을 위해 체계적인 에러 처리와
피드백 시스템을 구현했습니다. 주식분석 웹 어플리케이션 소스코드를 기반으로 실제
구현된 에러 처리 SAS 살펴보겠습니다.


--------------------------------------------------

[페이지 67]
서버측 에러 처리(계층적 예외처리)
ASA 예외 처리란 다양한 수준의 에러 상황을 체계적으로 포착하고 처리하는
방법으로 소스에서는 다음과 같이 사용되었습니다.
@app.route('/analyze’, methods=['POST'])
def analyze():

"""주식 분석 엔드포인트"""

try:

# 데이터 검증 (첫 번째 AS)

data = requestjson

if not data or ‘ticker’ not in data:

return jsonify({"error": "종목 코드(00<60가 필요합니다", "status": "error”}),

ticker = data['ticker']

company_name = data.get(‘company_name’)

#24 실행 (두 번째 계층)

result = analyze_stock(ticker, company_name)

# JSON ABS} 처리 (세 번째 계층)

try:

# OF 발생 가능성이 있는 SE 필드를 문자열로 변환
for key in result.get(‘raw_data’, {}).keys():
if not isinstance(result['raw_data'][key], (str, int, float, bool, list, dict,
type(None))):

result['raw_data'][key] = str(result['raw_data'][key])

# 테스트로 JSON 직렬화 시도
json.dumps(result)

except Exception as e:
# 직렬화 중 OF 발생 시, raw_data BO 제거
ㅁ001[0"15044 직렬화 오류: {str(e)}")
if 'raw_data’ in result:

del result['raw_data’]

return jsonify(result)

except Exception as e:
# 예상치 못한 모든 OF 처리 (최상위 계층)
00010"분석 요청 처리 중 오류 발생: {54(6)")

return jsonify({"error": str(e), "status": "error"}), 500

서버 측 에러 처리는 여러 AS OS 구현되어 있습니다.
 입력 데이터 검증: 필수 파라미터 확인 및 적절한 오류 응답 반환

 분석 로직 실행: analyze stock 함수 호출 및 결과 처리


--------------------------------------------------

[페이지 68]
vy JSON 직렬화 처리: 직렬화 불가능한 객체 처리 및 예외 상황 대응
 최상위 예외 처리: 예상치 못한 모든 오류를 포착하여 적절한 오류 응답 반환

‘Content-Type’: ‘application/json’

h

body: JSON.stringify({

ticker: ticker,

클라이언트 S 에러 처리
클라이언트 측 에러처리는 브라우저에서 VBSl|= JavaScript BOS 통해 사용자에게

company_name: companyName || undefined

적절한 피드백을 제공하는 방법으로 소스상에서는 다음과 같이 적용되었습니다.

document.getElementByld(‘analyzeForm’).addEventListener(‘submit’, async function(e) {

e.preventDefault();

// HTTP 응답 상태 확인

const ticker = document.getElementByld(‘ticker’).value;                                                                 if (!response.ok) {

const companyName = document.getElementByld('companyName’).value;                                              throw new Error(Al4] 응답 오류: ${response.status}’);

// 로딩 상태 표시, 이전 결과와 오류 메시지 초기화

document.getElementByld(‘loading').style.display = ‘block’;                                               // 응답 형식 확인

document.getElementByld(‘result’).innerHTML = ";                                                               const contentType = response.headers.get(‘content-type’);

document.getElementByld(‘errorMessage’).style.display = 'none’;                                                if (!contentType || !contentType.includes(‘application/json’)) {

throw new Error(‘S=0| JSON 형식이 아닙니다);

try {
// API 요청

const response = await fetch('/analyze’, {                                                                 // 응답 데이터 파싱

method: 'POST',                                                                                                const data = await response.json();

headers: {


--------------------------------------------------

[페이지 69]
// 결과 표시

let resultHtml = "';

// 분석 결과 또는 오류 상태에 따른 처리
if (datastatus === '5400659') {

// 성공적인 분석 결과 표시 로직

resultHtml += *<h2>${data.company_name} (${data.ticker}) 분석

Bit</h2>°;
// … 나머지 결과 표시 BE …
} else {
// 서버 측 오류 메시지 표시
document.getElementByld(‘errorMessage’).innerHTML = “2.7:
${data.error || '알 수 없는 LH};

document.getElementByld('‘errorMessage’).style.display = ‘block’;

resultHtml += *

<div class="analysis-section" >
<h3>2= 발생</13>
<p> BAS 문제가 발생했습니다. 다시 시도해 주세요.</60>
<0>오류 내용: ${dataerror | '알 수 없는 오류}</0>

</div>

document.getElementByld(‘result’).innerHTML = resultHtml;

} catch (error) {
// 클라이언트 측 예외 처리
0005016.60070「('분석 요청 오류, error);
document.getElementByld(‘errorMessage’).innerHTML = '`분석 요청 중 오류가
발생했습니다: ${errormessage};

document.getElementByld(‘errorMessage’).style.display = ‘block’;

document.getElementByld(‘result’).innerHTML = *

<div class="analysis-section" >
<113>요청 오류</113>
<0>분석 요청 중 오류가 발생했습니다: $(6000165539하</0>
<p> S2ACS 확인하시고 다시 시도해 주세요.</0>

</div>

} finally {
// 로딩 상태 종료

document.getElementByld(‘loading').style.display = 'none’;

»;


--------------------------------------------------

[페이지 70]
클라이언트 측 에러 처리는 다양한 오류 상황을 포착하고 처리합니다.
 네트워크 요청 실패 처리:111『 상태 코드 확인
 응답 형식 검증: 콘텐츠 타입확인!5044형식인지)
＊ 응답 데이터 상태 확인: 성공/오류 상태에 따른 처리
 예외 처리: fetch API 및 데이터 처리 과정의 모든 오류 포착

v 로딩 상태 관리: 요청 중 로딩 표시 및 완료 후 숨김

사용자 피드백 구조
사용자 피드백 구조는 사용자에게 애플리케이션의 상태와 진행 상황을 효과적으로
전달하는 SAS 설계하는 것 소스상에서 다음과 같이 적용되었습니다.

 로딩 인디케이터

<div id="loading">

<div class="loader"></div> 분석 중입니다. 잠시만 기다려주세요.…

</div>

 오류 메시지 컨테이너

<div id="errorMessage" class="error-message" > </div>

 결과 표시 영역

<div id="result" class="result-container" > </div>

 오류 메시지 표시 및 안내

document.getElementByld(‘errorMessage’).innerHTML = “#44 요청 중 오류가
발생했습니다: ${errormessage}’;

document.getElementByld(‘errorMessage’).style.display = 'block’;

document.getElementByld(‘result’).innerHTML = *

<div class="analysis-section" >
<h3>B28 QF</h3>
<0>분석 요청 중 오류가 발생했습니다: ${errormessage}</p>
<>종목코드를 확인하시고 다시 시도해 주세요.</6>

</div>

'

시가 작성한 소스내의 이러한 종합적인 에러 처리와 사용자 피드백 시스템을 통해
사용자는 어플리케이션의 SHS 명확히 이해하고, 문제 발생 시 적절한 AAS 취할 수
있게 됩니다. 또한 어플리케이션의 이상 작동 시 다양한 SAS 확인하여 시에게 질의를

통한 해결책을 찾을 수 있습니다.

4. 실제 ASE apppy 코드

SS Flask 웹 서버를 구축하기 위해 시와의 설계 및 요구사항을 전달한 결과 다음과
같이 구현되었습니다.


--------------------------------------------------

[페이지 71]
주식 분석 API
import os

import json

from flask import Flask, request, jsonify, render_template_string

from src.stock_analyzer import analyze_stock

from dotenv import load_dotenv

# 환경 변수 로드

load_dotenv()

# 네이버 API 키 환경 변수에 추가
os.environ{'NAVER_CLIENT_ID'} = "......."

os.environ{'NAVER_CLIENT_SECRET'] = "......"

app = Flask(_name_)

# 한국 주식 종목코드 매핑 (uO 표시)
KR_STOCK_NAMES = {

"005930": "삼성전자",

"000660": "9(하이닉스",

"035420": "NAVER",

"035720": "카카오",

"051910": "Ｌ6화학",

"207940": "삼성바이오로직스",
"006400": "삼성901",
"068270": "셀트리온",
"000270": "기아",

"005380": "현대차",

"011170": "롯데케미칼"

@app.route('/health', methods=['GET'])
def health_check():
"""서버 상태 확인 CHE ROLE

return jsonify({"status": "healthy", "messa

@app.route('/analyze’, methods=['POST’))
def analyze():

mal 분석 COE

try:

data = request.json

if not data or ‘ticker’ not in data:

ge:

"Server is running"})


--------------------------------------------------

[페이지 72]
return jsonify({"error": "SS 코드(00660가 필요합니다", "status": "error’}),

ticker = data['ticker’]

company_name = data.get(‘company_name’)

#24 실행

result = analyze_stock(ticker, company_name)

#JSON 직렬화 가능한지 확인
try:
# 오류 발생 가능성이 있는 모든 BOS 문자열로 변환
for key in result.get(‘raw_data’, {}).keys():
if not isinstance(result['raw_data'][key], (str, int, float, bool, list, dict,
type(None))):

result['raw_data'][key] = str(result['raw_data'][key])

# 테스트로 15044 ABS} 시도
json.dumps(result)

except Exception as e:
# 직렬화 중 오류 발생 Al, rawdata 필드 제거

ㅁ0010"15044 직렬화 오류: {90(6)")

if 'raw_data’ in result:

del result['raw_data’]

return jsonify(result)
except Exception as e:
printf'24 요청 처리 중 오류 Bes: {str(e)}")

return jsonify({"error": str(e), "status": "error"}), 500

@app.route('/", methods=['GET'])
def index():
""기본 엔드포인트"
# 종목코드 WBS HTMLE 변환
stock_mapping_html = ""
for ticker, name in KR_STOCK_NAMES.items():
stock_mapping_html += f"<div class='stock-item'> <span
class='ticker' >{ticker}</span>: <span class='company'>{name}</span> </div>"
return """
<html>
<head>
<title> #4] 분석 A|AE</title>

<style>


--------------------------------------------------

[페이지 73]
body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;
padding: 20px; }
h1 { color: #333; text-align: center; margin-bottom: 30px; }

content { background-color: #f9f9f9; padding: 20px; border-radius:

8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }

.api-example { display: none; }

.analysis-form { margin: 20px 0; }

.form-group { margin-bottom: 15px; }

label { display: block; margin-bottom: 5px; font-weight: bold; }

input { padding: 10px; width: 100%; box-sizing: border-box; border: 1px
solid #ddd; border-radius: 4px; }

button { padding: 12px 20px; background-color: #4CAFSO; color: white;
border: none; cursor: pointer; border-radius: 4px; font-weight: bold; width: 100%; }

button:hover { background-color: #45a049; }

#loading { display: none; text-align: center; margin: 20px 0; font-weight:
bold; color: #666; }

loader { display: inline-block; width: 20px; height: 20px; border: 3px

solid #f3f3f3; border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s
linear infinite; margin-right: 10px; }

@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform:
rotate(360deg); } }

.tesult-container { margin-top: 30px; }

-news-titles { margin: 15px 0; background-color: #f0f9ff; padding: 15px;
border-radius: 8px; border-left: Spx solid #3498db; }

-news-titles h3 { margin-top: 0; color: #3498db; }

-news-titles ul { padding-left: 20px; margin-bottom: 0; }

-news-titles li { margin-bottom: 8px; }

-news-date { color: #666; font-size: 0.9em; margin-left: 5px; }

.analysis-section { margin: 20px 0; padding: 15px; background-color:
white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }

.analysis-section h3 { margin-top: 0; border-bottom: 1px solid #eee;
padding-bottom: 10px; color: #2c3e50; }

footer { margin-top: 30px; text-align: center; color: #777; font-size:
0.9em; }

.stock-mapping { margin: 20px 0; padding: 15px; background-color:
#f5f5f5; border-radius: 8px; }

.stock-mapping h3 { margin-top: 0; color: #333; }

.stock-items { display: flex; flex-wrap: wrap; }

.stock-item { margin: 5px 10px Spx 0; padding: 5px 10px; background-
color: #e9ecef; border-radius: 4px; }

ticker { font-weight: bold; color: #495057; }

.company { color: #212529; }

.error-message { color: #d9534f; background-color: #f9f2f4; padding:

10px; border-radius: 4px; margin: 10px 0; display: none; }


--------------------------------------------------

[페이지 74]
.api-info { margin-top: 20px; padding: 10px; background-color: #e8f4f8;

border-radius: 8px; border-left: 5px solid #17a2b8; font-size: 0.9em; color: #495057; }

</style>
</head>
<body>

<hi>#Al 분석 시스템</111>

<div class="content">
<div class="stock-mapping">
<h3>#2 한국 주식 종목코드</113>
<div class="stock-items">
""" + stock_mapping_html + """

</div>

</div>

<div class="analysis-form" >
<form id="analyzeForm">
<div class="form-group" >
<label for="ticker"> SS 코드:</13061>
<input type="text" id="ticker" placeholder="04]: 005930

(삼성전자)" required>

<div class="form-group">

<label for="companyName">S|A} 이름

(1 HAT S):</label >
<input type="text" id="companyName" placeholder="Q4]:
삼성전자">
</div>
<button type="submit">#44 A|4}</button>
</form>
</div>

<div id="errorMessage" class="error-message" > </div>

<div id="loading">

<div class="loader"> </div> 분석 중입니다. 잠시만 기다려주세요…

</div>

<div id="result" class="result-container” > </div>

<div class="api-info" >


--------------------------------------------------

[페이지 75]
<p>= 서비스는 네이버 검색 4미를 활용하여 최신 뉴스 정보를

수집합니다.</0>

</div>

</div>

<footer>

© 2025 주식 분석 시스템 - 재무 데이터 및 뉴스 기반 주식 분석

</footer>

<script>
document.getElementByld(‘analyzeForm').addEventListener(‘submit’,
async function(e) {

e.preventDefault();

const ticker = document.getElementByld(‘ticker').value;
const companyName =

document.getElementByld(‘companyName’).value;

document.getElementByld(‘loading’).style.display = ‘block’;
document.getElementByld(‘result’).innerHTML = ";

document.getElementByld(‘errorMessage’).style.display = 'none’;

try {
const response = await fetch('/analyze’, {
method: 'POST',
headers: {
‘Content-Type’: ‘application/json'
}
body: JSON. stringify({
ticker: ticker,
company_name: companyName || undefined
))
);

if (!response.ok) {

throw new Error(A{4] 응답 오류: ${response.status});

const contentType = response.headers.get(‘content-type’);
if (contentType || !contentType.includes(‘application/json’)) {

throw new Error(S 0] JSON 형식이 아닙니다);


--------------------------------------------------

[페이지 76]
const data = await response.json();

// 결과 표시

let resultHtml = ";

if (datastatus === 'success') {

resultHtml += *<h2>${data.company_name}

(${data.ticker}) 분석 결과</112>';

// 뉴스 제목 표시

if (data.news_titles && data.news_titles.length > 0) {

resultHtml += *
<div class="news-titles">
<h3>4|Al 뉴스 헤드라인</113>

<ul>

data.news_titles.forEach(title => {

resultHtm! += *<li>${title}</li>’;

resultHtml += ~

'<br>"}</p>

'<br>"}</p>

</ul>

</div>

// 뉴스 요약

resultHtml += ~

<div class="analysis-section" >
<113>뉴스 요약</13>

<p> ${data.news_summary.replace(/#n/g,

</div>

// 감성 분석

resultHtml += *

<div class="analysis-section" >
<13>감성 BAY </h3>

<p> ${data.sentiment_analysis.replace(/W4¥n/g,

</div>


--------------------------------------------------

[페이지 77]
// 재무 분석

resultHtml += *

<div class="analysis-section" >
<13>재무 BA </h3>

<p> ${data.financial_analysis.replace(/#¥n/g,

‘<br>')}</p>

} else {
// 오류 메시지 표시
document.getElementByld(‘errorMessage’).innerHTML =
`오류: ${(data.error || '알 수 없는 오류'`;

document.getElementByld(‘errorMessage’).style.display =

resultHtml += *
<div class="analysis-section" >
<h3> 25 발생</113>

<>분석 중 문제가 발생했습니다. 다시 시도해

<0>오류 내용: ${(dataerror || 'S 수 없는 오류}</0>

</div>

document.getElementByld(‘result’).innerHTML = resultHtml;
} catch (error) {
console.error((#44 요청 2: error);
document.getElementByld(‘errorMessage’).innerHTML = “#44
요청 중 오류가 발생했습니다: $errormessage};

document.getElementByld(‘errorMessage’).style.display =

‘block’;
document.getElementByld(‘result’).innerHTML = *
<div class="analysis-section" >
<13>요청 오류</13>
<0>분석 요청 중 오류가 발생했습니다:
${error.message}</p>

<0>종목코드를 확인하시고 다시 시도해 주세요.</0>
</div>
} finally {

document.getElementByld(‘loading’).style.display = 'none’;


--------------------------------------------------

[페이지 78]
»;
</script>
<, /body>

</html>

app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

이 RES FQ 부분별로 분석해보겠습니다.

초기화 및 환경 설정

# 네이버 API 키 환경 변수에 추가
os.environ[{'NAVER_CLIENT_ID'] = " NAVER API 취득 필요 "

os.environ['NAVER_CLIENT_SECRET'] = " NAVER API 취득 필요"

app = Flask(_name_)

- 필요한 라이브러리를 임포트하고 Flask YS 초기화합니다.
- dotenvS 사용해 환경 변수를 로드합니다.

네이버 API7IS 환경 변수에 설정합니다. (주후 006601에 주가입력해도 됩니다)

데이터 정의

import os

import json

from flask import Flask, request, jsonify, render_template_string
from src.stock_analyzer import analyze_stock

from dotenv import load_dotenv

# 환경 변수 로드

load_dotenv()

# 한국 주식 종목코드 매핑 (viol 표시)
KR_STOCK_NAMES = {

"005930": "삼성전자",

"000660": "9\하이닉스",

- 한국 주요 종목 BEM 회사명을 매핑한 사전을 정의합니다.

- 이 정보는 A 인터페이스에 표시되어 사용자의 입력을 돕습니다.


--------------------------------------------------

[페이지 79]
API 엔드포인트

@app.route('/health', 07641005=['66ㄷ1'])
def health_check():

# 서버 상태 확인 코드

@app.route('/analyze’, methods=['POST'})
def analyze():

# 주식 분석 처리 코드

@app.route('/', methods=['GET'])
def index():

# 메인 페이지 렌더링 코드

- 세개의 주요 엔드포인트를 정의합니다.
- /health: 서버 상태 확인용
- /analyze: 주식분석 API

- /: 메인 웹 인터페이스

웹 인터페이스

def index():

# 종목코드 WBS HIMES 변환

stock_mapping_html = ""
for ticker, name in KR_STOCK_NAMES.items():

stock_mapping_html += f"<div class='stock-item'>...</div>"

return """
<html>
<!-- HTML, CSS, JavaScript 코드 -->

</html>

- 단일 페이지 어플리케이션 PAS 설계되었습니다.
- HTML, CSS, JavaScriptS 하나의 파일에 포함하여 반환합니다.

- 한국 주요 종목 정보를 동적으로 HTML 삽입합니다.

클라이언트 측 스크립트

document.getElementByld(‘analyzeForm').addEventListener(‘submit’, async function(e) {

// 폼 제출 처리 및 | 요청 코드

- 비동기 JavaScripts 사용하여 40| 요청을 처리합니다.

로딩상태, 오류처리, 결과표시 등의 로직을 구현합니다.


--------------------------------------------------

[페이지 80]
서버 실행 설정

if _name_ == '_main_':

app.run(host='0.0.0.0', port=int(os.environ.get('PORT’, 5000)))

- 어플리케이션 실행 설정을 정의합니다.
- 모든 네트워크 인터페이스에서 19[61하도록 설정합니다.

- 환경변수에서 포트를 가져오거나 기본값으로 5000을 사용합니다.

이와 같이 비개발자인 저자와 시의 대화를 통해 웹 AWS PSS 수 있었습니다.
구축을 하면서 41/0×에 대해서 효과적으로 디자인하려면 어떻게 해야 할까, uxS

개선하기 위해서는 어떻게 SES 해야 할까 라는 궁금증이 생겨 시에게 물어보았습니다.

[참고] vi/ux 디자인을 위한 프롬프트 작성법(시답변)
효과적인 VI/UX 디자인을 위해 시에게 요청할 때 사용할 수 있는 프롬프트 작성 방법을
살펴보겠습니다. 좋은 디자인 프롬프트는 사용자 SAB 크게 향상시킬 수 있는

결과물을 얻는 데 핵심적입니다.

Vv

목표와 컨텍스트 명확히 제시하기

다음 정보를 바탕으로 주식 분석 웹 애플리케이션의 UI 디자인을 제안해주세요:

목표: 일반 사용자가 종목 코드를 입력하고 재무 분석, 뉴스 분석, 감성 분석 결과를

핵심 기능: 종목 코드 입력, 분석 요청, 분석 결과 시각화

디자인 방향: 직관적이고 깔끔한 인터페이스,

디바이스: 데스크톱 우선, 모바일 대응 고려

주요 색상: 신뢰감을 주는 블루 계열 선호

명확한 목표와 컨텍스트를 제공함으로써 시는 더 적절한 디자인 방향을 제시할 수
있습니다. 특히 대상 사용자와 핵심 기능, 디자인 방향성을 구체적으로 명시하는 것
중요합니다.

> 사용자 여정 중심 접근
주식 분석 애플리케이션의 다음 사용자 여정에 맞는 | SSS 설계해 주세요:

1. 첫 방문: 사용자가 처음 사이트에 방문했을 때 어떤 정보와 옵션을 제공할지
2. 종목 코드 입력: 사용자가 종목 코드를 쉽게 입력할 수 있는 방법 (자동완성, 예시

제공 등)

3. 분석 요청: 분석 버튼 클릭 후 로딩 상태 표시 방법

4. 결과 확인: 분석 결과를 어떻게 구성하고 시각화할지 (섹션 구분, 주요 정보 강조
등)

5. 오류 상황: 잘못된 종목 코드 입력 등 오류 발생 시 피드백 방법

각 단계에서 사용자 경험을 최적화할 수 있는 Ul 요소와 디자인 HAS 제안해

주세요.


--------------------------------------------------

[페이지 81]
사용자 여정을 단계별로 나누어 시에게 요청하면, 각 단계에 최적화된 ul 요소와
상호작용 방식을 제안받을 수 있습니다. 이는 전체 사용자 경험의 일관성과 흐름을
개선하는 데 도움이 됩니다.

> 구체적인 U 컴포넌트 요청

주식 분석 애플리케이션을 위한 다음 Ul 컴포넌트에 대한 디자인을 제안해 주세요:

1. 검색 폼:
- 종목 코드 입력 필드와 자동완성 드롭다운
- 검색 버튼 디자인 및 위치
- 최근 검색 기록 표시 방법

2. 로딩 인디케이터:
- 분석 진행 중임을 보여주는 애니메이션
진행 상태 표시 방법 (예: 단계별 진행바)

- 예상 소요 시간 표시

석, 감성 분석, 재무 분석 섹션 구분 방법
- 주요 지표 강조 표시 방법

- 긍정/부정 감성에 따른 시각적 차별화

각 컴포넌트는 반응형이어야 하며, 데스크톱과 모바일 환경 모두에서 잘 작동해야

합니다.

특정 Ul 컴포넌트에 초점을 맞춘 프롬프트는 디자인의 세부 사항에 대한 구체적인
제안을 얻는 데 유용합니다. 각 컴포넌트의 기능과 요구사항을 명확히 설명하면 더
정교한 디자인을 얻을 수 있습니다.

> 스타일 가이드 및 디자인 시스템 요청

주식 분석 웹 애플리케이션을 위한 간단한 디자인 시스템을 제안해 주세요. 다음

요소를 포함해 주세요:

1.색

ox

팔레트:
색상, 보조 색상, 배경색, 텍스트 색상

이 4

정/중립/부정 SHS 나타내는 색상

0보

고, 성공, 정보 메시지를 위한 색상

2. 타이포그래피:
- 제목, 부제목, 본문 텍스트를 위한 폰트 패밀리와 크기

- 데이터 표시를 위한 숫자 폰트 스타일

3. 버튼 스타일:
- 기본, 강조, 비활성화 버튼 디자인
- 호버, 포커스, 활성 상태의 스타일


--------------------------------------------------

[페이지 82]
4. 카드 및 컨테이너:

- 섹션 구분을 위한 카드 디자인

- 그림자, 테두리, 모서리 둥글기 등의 스타일

디자인 시스템이나 스타일 가이드를 요정하면 일관된 US 구현하는 데 필요한 기본
요소들을 얻을 수 있습니다. 이는 개별 컴포넌트를 넘어 전체 애플리케이션의 디자인
일관성을 유지하는 데 도움이 됩니다.

> 디자인 참고 사항 및 영감 제공
주식 분석 결과를 시각적으로 표현하는 를 디자인해 주세요. 다음 사이트들의

디자인 요소를 참고하되, 더 단순하고 직관적인 인터페이스를 SHE 합니다:

- Yahoo Finance2| 주식 정보 페이지 레이아웃
- Bloomberg2| 데이터 시각화 스타일
- Robinhood] 미니멀리스트 접근법

특히 다음 요소들이 효과적으로 표현되어야 합니다:
- 주가 추세와 변동성
- 긍정/부정 감성 분석 결과

무 지표 (P/E, ROE 등)

|드라인과 요약

디자인은 금융 데이터에 익숙하지 않은 일반 사용자도 직관적으로 이해할 수 있어야
합니다.
참고할 만한 디자인이나 영감을 주는 사이트를 언급하면 시가 해당 스타일을

차용하면서도 새로운 디자인을 제안하는 데 도움이 됩니다. 이 방법은 특히 특정
업계나 도메인의 디자인 관행을 따르고 싶을 때 유용합니다.

이러한 프롬프트 작성법을 활용하면 ul/ux 디자인에 대한 더 구체적이고 실용적인
제안을 시로부터 얻을 수 있습니다. 이를 통해 개발 시간을 단축하고 더 사용자

친화적인 인터페이스를 구현할 수 있습니다.

B. HTML/Css 템플릿 구현

HTML/CSS 템플릿은 주식 분석 결과를 사용자에게 시각적으로 효과적으로 전달하기 위한
핵심 요소입니다. 이번 역시 시와의 힘을 빌려 종목 분석 결과를 직관적으로 확인할 수
있도록 템플릿을 구현해 보겠습니다.

1. Flak 템플릿 시스템 활용하기

저자: Flask 프레임워크에서 템플릿을 어떻게 구현하면 좋을까요? 주식 분석 결과를

보여주는 간단한 A 페이지를 만들어주세요

Al: Flask 에서는 템플릿 PAS 위해 주로 10102 템플릿 엔진을 사용합니다. 템플릿

파일을 별도로 관리하는 방법과 문자열로 직접 템플릿을 정의하는 SHO] 있습니다.


--------------------------------------------------

[페이지 83]
간단한 Of F2|A] 0/4 0/2} render_template_string 을 사용하여 HTML 을 직접

python 코드 내에 포함시킬 수 있습니다. 어떤 YAS 선호하시나요

저자: 간단한 원페이지 어플리케이션이라서 render_template_stringS 사용하는 것이
편할 것 같습니다.11\11Ｌ코드를 070100 파일 내에 직접 작성하는 방식으로
진행해주세요
Al: 18 Flask2| render_template_string 함수를 사용하여 HTIMLASS Python 파일
내에 직접 작성하는 방식으로 구현하겠습니다. 이방식은 작은 프로젝트에 적합하며,
코드 관리가 간편합니다. 기본적인 구조를 제안해드리겠습니다.
@app.route('/', methods=['GET'])
def index():

"""기본 엔드포인트"""

# 종목코드 HBS HTML 변환

stock_mapping_html = ""

for ticker, name in KR_STOCK_NAMES.items():

stock_mapping_html += f"<div class='stock-item'> <span

class='ticker'>{ticker}</span>: <span class='company'>{name}</span> </div>"

return """

<html>

<head>
<title> A] 분석 A\AH</title>
<style>
<!-- 스타일 정의 -->
</style>
</head>
<body>
<!-- HTML 컨텐츠 -->
</body>

</html>

이런 대화를 위 소스와 ZO] Flask2| 템플릿 시스템에 직접 HTMLACS 작성하는
방법을 활용한 방식으로 소스를 구성했습니다. 이러한 접근 방식의 SAS 별도의 템플릿

파일을 HAS 필요 없이 모든 AC} 하나의 파일에 포함되어 개발과 배포가
간단해진다는 점입니다. 하지만 사용자에 의해 좀더 세분화된 페이지 설계와 템플릿을
고려한다면 시에게 구체적인 설명을 통해 원페이지가 아닌 다양한 페이지 설계가

가능합니다.

2. 주식 분석 결과 표시를 위한 HTIMLAA 설계

주식 분석 결과를 위 템플릿에 주가하기 위해 직관적인 14[구조가 필요합니다.
이부분에 대해 시와 나눈 대화는 다음과 같습니다.


--------------------------------------------------

[페이지 84]
저자: 주식 분석 결과를 보여주기 위한 HTML FSS 설계하고 싶습니다. 어떻게
FAS 해야 하나요?

: 주식 분석 결과를 효과적으로 보여주기 위해 다음과 같은 구조를 제안합니다.
최상단에 회사명과 종목코드를 표시하는 헤더 섹션
최신 뉴스 헤드라인을 보여주는 뉴스 섹션
뉴스 요약 섹션
감성 분석 결과 섹션
재무 분석 결과 섹션

각 세션은 시각적으로 구분되도록 디자인하고, 결과를 단계적으로 보여주는 PA

좋을 것 같습니다.

저자: 분석 진행중일때는 "분석진행 중"이라고 표시하거나 오류가 발생했을 때
사용자에게 알려주는 것도 필요합니다.

Al: 알겠습니다. 0×관점에서 중요한 요소들입니다. 다음 USS 주가하겠습니다.

3. 사용자 친화적인 인터페이스 구현하기

사용자 친화적인 인터페이스는 웹 어플리케이션의 성공에 중요한 요소입니다. 좋은
니1/0%디자인을 위해 시에 어떻게 구성하면 좋을지 논의했습니다.

저자: 사용자 친화적인 인터페이스를 위한 화면 스타일을 어떻게 구성하면 좋을까요

시: 사용자 친화적인 인터페이스를 위한 655스타일링에는 다음 원칙을 고려하는 것이
좋습니다.

- 일관된 색상스키마: 주요 색상 2-3개로 일관성 있게 디자인

- 여백과 간격: 요소 간 적절한 여백으로 가독성 향상

- 명확한 타이포그래피: 읽기 쉬운 폰트와 적절한 크기

- 반응형 디자인: 다양한 화면 크기에 대응

- 상태피드백: 로딩, 오류 등의 상태를 시각적으로 명확히 표시

저자: 주식 분석 결과의 각 섹션을 시각적으로 어떻게 구분하면 좋을지 제안해주세요

시: 각 분석 결과 AMS 시각적으로 구분하기 위한 방법으로 다음을 제안합니다.
- 섹션별 카드 스타일: 배경색, 테두리, 그림자를 활용한 카드 형태
- 명확한 혜더: 각 섹션의 제목을 강조하는 스타일
- 콘텐츠 구분: 내용에 따라 적절한 마진과 패딩 적용
- 시각적 계층 구조: 중요도에 따른 크기와 위치 조정
- 컬러 코딩: 섹션별로 미묘한 색상 차이나 왼쪽 경계선 색상 변경

특히 뉴스 AMS 연한 파란색 배경, 재무 SAS 흰색 배경에 그림자를 주는 등의


--------------------------------------------------

[페이지 85]
이와 같은 대화를 통해 설계된 655스타일은 다음과 같이 구현되었습니다.

<style>

body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding:
20px; }

h1 { color: #333; text-align: center; margin-bottom: 30px; }

.content { background-color: #f9f9f9; padding: 20px; border-radius: 8px; box-
shadow: 0 2px Spx rgba(0,0,0,0.1); }

/* 폼 스타일 +

.analysis-form { margin: 20px 0; }

form-group { margin-bottom: 15px; }

label { display: block; margin-bottom: 5px; font-weight: bold; }

input { padding: 10px; width: 100%; box-sizing: border-box; border: 1px solid #ddd;
border-radius: 4px; }

button { padding: 12px 20px; background-color: #4CAFSO0; color: white; border:
none; cursor: pointer; border-radius: 4px; font-weight: bold; width: 100%; }

button:hover { background-color: #45a049; }

/* 로딩 인디케이터 */

#loading { display: none; text-align: center; margin: 20px 0; font-weight: bold; color:
#666; }

Joader { display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3;
border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;

margin-right: 10px; }

@keyframes spin { 0% { transform: rotate(Odeg); } 100% { transform: rotate(360deg);
}}

/* 결과 컨테이너 스타일 */

result-container { margin-top: 30px; }

-news-titles { margin: 15px 0; background-color: #f0f9ff; padding: 15px; border-
radius: 8px; border-left: Spx solid #3498db; }

-news-titles h3 { margin-top: 0; color: #3498db; }

-news-titles ul { padding-left: 20px; margin-bottom: 0; }

-news-titles li { margin-bottom: 8px; }

-news-date { color: #666; font-size: 0.9em; margin-left: 5px; }

.analysis-section { margin: 20px 0; padding: 15px; background-color: white; border-
radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }

.analysis-section h3 { margin-top: 0; border-bottom: 1px solid #eee; padding-
bottom: 10px; color: #2c3e50; }

/* 오류 메시지 AEP +

.error-message { color: #d9534f; background-color: #f9f2f4; padding: 10px; border-
radius: 4px; margin: 10px 0; display: none; }

/* 기타 스타일 +7

footer { margin-top: 30px; text-align: center; color: #777; font-size: 0.9em; }

.stock-mapping { margin: 20px 0; padding: 15px; background-color: #f5f5f5; border-
radius: 8px; }

.stock-mapping h3 { margin-top: 0; color: #333; }


--------------------------------------------------

[페이지 86]
stock-items { display: flex; flex-wrap: wrap; }

.stock-item { margin: 5px 10px Spx 0; padding: 5px 10px; background-color:
#e9ecef; border-radius: 4px; }

ticker { font-weight: bold; color: #495057; }

company { color: #212529; }

api-info { margin-top: 20px; padding: 10px; background-color: #e8f4f8; border-

radius: 8px; border-left: 5px solid #17a2b8; font-size: 0.9em; color: #495057; }

</style>

4. 실제 index.html 파일 구조 분석

앞서 살펴본 655스타일링과 함께, 실제 어플리케이션의 11\/!구조를 자세히 분석해

보겠습니다. 소스코드에 포함된 1\Ｌ템플릿은 다음과 같은 주요 구성 요소로 이루어져

있습니다 .

- 헤더 부분: 어플리케이션 AISI} 메타 정보

- 주요 종목코드 안내 섹션: 사용자 편의를 위한 주요 한국 주식 종목코드 표시

- 분석 폼: 종목코드와 회사명 입력 필드

- 오류 메시지 영역: 분석 과정에서 발생한 오류 표시

- 로딩 인디케이터: 분석 진행 중임을 표시

- 결과 컨테이너: 분석 결과가 표시되는 영역

- APIS: 사용된 APIOY 대한 안내

- 푸터: 저작권 및 서비스 정보

이 구조는 사용자에게 명확한 정보 흐름을 제공합니다. 구체적인 114[구조에 대해 시와
대화한 내용입니다.

저자: 이 HIML FA 중에서 사용자 SAS 위해 가장 중요한 FES 무엇일까요

시: 자용자 경험 측면에서 가장 중요한 부분은 다음과 같습니다.

- 분석 폼: 사용자가 첫 번째로 상호작용하는 부분으로, 직관적이고 사용하기

쉬워야 합니다.
- 로딩 인디케이터: 분석이 진행 중임을 명확히 표시하여 사용자가 기다려야 함을
인지시킴니다.

- 오류 메시지: 문제 발생 시 명확하게 무엇이 잘못되었는지 알려줍니다.
- 결과 표시 영역: 분석 결과를 명확하고 읽기 쉽게 제시합니다.

특히 비동기 작업이 진행될 때 사용자에게 현재 SHS 알려주는 것이 중요합니다.
이를 통해 사용자는 애플리케이션이 여전히 작동 중이라는 ABS 수 있고, 결과를
기다리는 동안 불안감을 줄일 수 있습니다.

저자: 주식 분석 결과를 표시할 때 어떤 순서로 정보를 배치하는 것이 좋을까요?


--------------------------------------------------

[페이지 87]
Al 결과 정보를 BAS 때는 다음과 같은 순서로 배치하는 것이 효과적입니다:

헤드라인 정보: 회사명과 종목코드를 최상단에 배치하여 사용자가 현재 분석
중인 주식을 명확히 인지하도록 합니다.
최신 뉴스 헤드라인: 가장 시의성 있는 정보로, 사용자에게 빠르게 최근 동향을
파악할 수 있게 합니다.
뉴스 요약: 뉴스의 전체적인 내용을 간략히 정리하여 제공합니다.
감성 분석: 뉴스의 감성을 분석한 결과로, 뉴스 내용에 대한 추가적인 인사이트를
제공합니다.

무 분석: 가장 상세하고 복잡한 정보로, 마지막에 배치하여 심층적인 분석
결과를 제공합니다.

이러한 SME 사용자가 정보를 점진적으로 받아들이며 이해할 수 있도록 도와줍니다.
간단한 정보에서 복잡한 정보로의 자연스러운 SEB 만들어 사용자 경험을

향상시킴니다.

이 논의를 바탕으로 구현된 111\/1구조는 사용자가 자연스럽게 SHS 인지하고 이해할
수 있도록 설계되었습니다. 특히 결과 표시 HFS 다음와 같은 13435010마코드를 통

동적으로 생성됩니다.

// 결과 표시

let resultHtml = ";

if (datastatus === ‘success’) {

resultHtml += *<h2>${data.company_name} (${data.ticker}) 분석 Bit</h2>°;

// 뉴스 제목 표시
if (data.news_titles && data.news_titles.length > 0) {
resultHtml += ~
<div class="news-titles">
<13>최신 뉴스 혜드라인</13>

<ul>

data.news_titles. forEach(title => {

resultHtml += *<li>${title}</li>’;

resultHtml += ~
</ul>

</div>

// 뉴스 요약
resultHtml += ~

<div class="analysis-section" >


--------------------------------------------------

[페이지 88]
<h3>42 요약</113>
<p> ${data.news_summary.replace(/W¥n/g, '<br>')}</p>
</div>

// 감성 분석
resultHtml += *
<div class="analysis-section" >
<h3>Ha BA </h3>
<p> ${data.sentiment_analysis.replace(/W4n/g, '<br>')}</p>
</div>

// 재무 분석
resultHtml += '
<div class="analysis-section" >
<113>재무 BA </h3>
<p> ${data.sentiment_analysis.replace(/W¥n/g, '<br>')}</p>
</div>

이 BEE APIA, 받아온 데이터를 바탕으로 동적으로 HTMLS 생성하여 결과
컨테이너에 삽입합니다. 뉴스제목, 뉴스요약, 감성분석, 재무분석 순으로 정보를 배치하여
ASAP} 점진적으로 정보를 이해할 수 있도록 합니다.

전체적인 HTIMLPAL (55스타일링은 사용자 친화적인 인터페이스를 Paste 데
중점을 두고 있으며, 이는 웹 어플리케이션의 성공적인 사용자 SAB 제공하는데
핵심적인 역할을 합니다.

C. 비동기 데이터 처리 구현

웹 어플리케이션에서 사용자 SAB 향상시키기 위해서는 효율적인 비동기 데이터
처리가 필수적입니다. 이번 섹션에서는 주식분석시스템에서 사용자 QBS 비동기적으로
처리하고, 결과를 동적으로 렌더링하는 방법에 대해 알아보겠습니다.

1. Javascripts 활용한 비동기 요청 처리

비동기 데이터 처리는 사용자가 분석 버튼을 클릭한 후 서버의 응답을 기다리는 동안
페이지가 응답하지 않는 상태에 빠지지 않도록 하는 중요한 역할을 합니다. 이에 대해
시와 다음과 같은 대화를 나누었습니다.

저자: 주식 분석시스템 웹페이지에서 사용자가 분석 시작 버튼을 클릭했을 때 화면은

그대로이면서 요청 종목에 대한 분석시스템에 요청하는 처리방법을 하고싶습니다.

(비동기적 요청)


--------------------------------------------------

[페이지 89]
Al: 비동기 요청 처리를 위해 13435010의 Fetch APIS 활용하는 것이 좋습니다. 이를
통해 페이지 새로고침 없이 서버와 통신할 수 있습니다. 다음과 같은 방식으로 구현할
수 있습니다.

폼 제출 이벤트를 가로채서 기본 제출 동작을 방지합니다.

입력 값을 수집하여 JSON SES 변환합니다.

Fetch APIS 사용하여 분석 엔드포인트에 POST 요청을 SYLICh.
Promise 체인을 통해 응답을 처리합니다.

결과를 ㅁ0\/ 에 동적으로 표시합니다.

저자: 그럼 비동기 요청 중에 사용자에게 현재 진행 sos 어떻게 알려줄 수
있을까요?

Al 비동기 요청 중에 사용자에게 진행 Sets 알려주기 위해 다음과 같은 방법을
사용할 수 있습니다:
- 로딩 인디케이터 표시: 스피너나 프로그레스 바를 사용하여 요청이 진행 중임을
시각적으로 표시합니다.
상태 메시지 업데이트: "분석 중입니다. 잠시만 기다려주세요…" 같은 HAAS
표시합니다.
입력 폼 비활성화: 분석 중에는 폼 입력과 버튼을 비활성화하여 중복 요청을
방지합니다.
오류 처리: 요청이 AMS 경우 적절한 OF AAS 표시합니다.

이런 SAS 통해 사용자는 현재 애플리케이션 SHS 명확하게 인지할 수 있습니다.

저자: 그럼 실제 코드에 적용해주세요

씨: 네 다음은 실제 코드에 적용된 13435001마코드 입니다.

document.getElementByld(‘analyzeForm’).addEventListener(‘submit’, async function(e) {

e.preventDefault();

const ticker = document.getElementByld(‘ticker’).value;

const companyName = document.getElementByld(‘companyName’).value;

document.getElementByld(‘loading’).style.display = ‘block’;
document.getElementByld(result’).innerHTML = ";

document.getElementByld(‘errorMessage’).style.display = 'none’;

try {
const response = await fetch(‘/analyze’, {
method: 'POST'’,
headers: {
‘Content-Type’: ‘application/json’

body: JSON.stringify({


--------------------------------------------------

[페이지 90]
ticker: ticker,

company_name: companyName || undefined

if (!response.ok) {

throw new Error(Alt] 응답 오류: ${response.status}));

const contentType = response.headers.get(‘content-type’);
if (!contentType || !contentType.includes(‘application/json’)) {

throw new 6『01('응답이 JSON 형식이 아닙니다');

const data = await response,json();

// 결과 표시 코드 (뒤에서 자세히 다룹니다)
} catch (error) {
console.error((‘#44 요청 오류, error);

document.getElementByld(‘errorMessage’).innerHTML = “#44 요청 중 오류가

발생했습니다: ${errormessage}’;

document.getElementByld(‘errorMessage’).style.display = ‘block’;

document.getElementByld(‘result’).innerHTML = ~
<div class="analysis-section" >
<113>요청 2 F</h3>
<0>분석 요청 중 오류가 발생했습니다: $errormessage}</p>
<ㅁ>종목코드를 확인하시고 다시 시도해 주세요.</0>
</div>
} finally {

document.getElementByld(‘loading’).style.display = 'none’;

dD:

이 BSE 폼 제출 OWES ASMA 기본 동작을 방지하고, 비동기적으로 서버에 분석
요청을 보내는 기능을 구현합니다. 요청 전후의 VIS HSS 통해 사용자에게 현재
상황을 명확하게 알려줍니다.

2. 분석 진행 상태 표시 기능 구현

사용자가 분석 요청을 클릭 후 결과를 기다리는 동안 현재 상태를 시각적으로 표시하는
것은 중요합니다. 그렇지 않을 경우 결과를 기다리기전에 페이지를 종료하거나 분석
결과전에 다른 종목 분석 요청을 하는 다른 행동을 할 수 있기 때문입니다.

이부분에 대해 시와 다음과 같이 논의했습니다.


--------------------------------------------------

[페이지 91]
저자: 분석이 진행 중일 때 사용자에게 더 명확하게 상태를 SAFE SAO 있을까요?

: 분석 진행 상태를 효과적으로 BASE SAS 여러 가지가 있습니다:

애니메이션 로딩 스피너: 현재 구현된 것처럼 회전하는 스피너를 사용하여 진행
중임을 표시합니다.

진행 메시지 업데이트: "데이터 수집 Su. "뉴스 분석 중.…", "재무 데이터 처리
중…" 같이 단계별 메시지를 표시하면 사용자가 더 구체적인 진행 상황을 알 수
있습니다.

타이머 표시: 분석에 시간이 오래 걸릴 경우, 경과 시간을 표시하여 사용자에게
시간 감각을 제공할 수 있습니다.

진행률 표시바: 전체 분석 과정 중 현재 진행된 부분을 시각적으로 표시할 수

있습니다.

이중 로딩 스피너와 "분석 중입니다. 잠시만 기다려주세요." 메시지를 조합하는 방식이
가장 간단하면서도 효과적인 방법입니다.

저자: 로딩 스피너와 메시지를 조합하는 SACS 구현해주세요

시: 네 요청하신 방법으로 소스를 수정하겠습니다.

이 대화를 바탕으로 다음 소스와 같이 비교적 간단하지만 효과적인 로딩 인디케이터
방식으로 구현되었습니다.
<div id="loading">

<div class="loader"></div> 분석 중입니다. 잠시만 기다려주세요.

</div>

#loading { display: none; text-align: center; margin: 20px 0; font-weight: bold; color:
#666; }

loader { display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3;
border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;
margin-right: 10px; }

@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

이러한 SAS 다음과 같은 그림으로 표현되었습니다.

© 분석 중입니다. 잠시만 기다려주세요…


--------------------------------------------------

[페이지 92]
. 분석 결과의 동적 렌더링 방법

서버로부터 분석 결과를 받은 후, 이를 사용자에게 효과적으로 표시하는 것은 사용자
Bao 중요한 SHB 미칩니다. 주식분석 시스템의 분석 Aas 어떻게 효과적으로
표시할지 시와 논의를 했습니다.

저자: 서버로부터 받은 주식종목 분석 결과를 어떻게 효과적으로 표시할 수 있을까?

: 분석 결과를 효과적으로 표시하는 SHS 다음과 같이 제안합니다.

- 템플릿 리터럴을 사용한 HTML 생성
JavaScript2| 템플릿 리터럴을 사용하여 서버 응답 데이터를 기반으로
HTMLEASS 생성합니다. 이 방식은 간단하고 직관적이지만, 복잡한 VIALE
관리가 어려울 수 있습니다.
섹션별 구조화
결과를 뉴스 헤드라인, 뉴스요약, 감성분석, 재무분석 등 논리적 섹션으로
구분하여 표시합니다. 각 섹션은 시각적으로 구분된 카드 형태로 제공됩니다.
조건부 렌더링
뉴스 제목과 같은 배열 데이터는 SME 경우에만 렌더링 됩니다. 서버 응답
상태에 따라 다른 내용을 표시합니다.
텍스트 EOE

줄바꿈 문자를 HTML <67>태그로 변환하여 텍스트 BAS 유지합니다.

저자: 제안해준 방법으로 소스를 수정해주세요

씨의 제안을 바탕으로 템플릿 리터럴을 활용한 동적 HIMLSS SAB 채택하여 소스가
수정되었습니다.
// 결과 표시

let resultHtml = ";

if (data.status === ‘success’) {

resultHtml += *<h2>${data.company_name} (${data.ticker}) 분석 Zit</h2>°;

// 뉴스 제목 표시
if (data.news_titles && data.news_titles.length > 0) {
resultHtml += ~
<div class="news-titles">
<h3>4)Al GA 헤드라인</113>

<ul>

data.news_titles. forEach(title => {
resultHtml += *<li>${title}</li>’;

yy;

resultHtml += ~

</ul>


--------------------------------------------------

[페이지 93]
// 뉴스 요약
resultHtml += ~
<div class="analysis-section" >

<h3>42 QF </h3>

<p> ${data.news_summary.replace(/Wi¥n/g, '<br>')}</p>

</div>

// 감성 분석
resultHtml += *
<div class="analysis-section" >

<h3>28 EA </h3>

<p> ${data.sentiment_analysis.replace(/¥¥n/g, '<br>')}</p>

</div>

// 재무 분석

resultHtml += °

<div class="analysis-section" >

<h3>MF HA </h3>

<p> ${data.financial_analysis.replace(/#¥'n/g, '<br>')}</p>
</div>

,

} else {

// 오류 메시지 표시

document.getElementByld(‘errorMessage’).innerHTML = “2.4: ${data.error | '알 수

없는 오류')';

document.getElementByld(‘errorMessage’).style.display = ‘block’;

resultHtml += *

<div class="analysis-section" >
<h3> 25 발생</113>
<>분석 중 문제가 발생했습니다. 다시 시도해 주세요.</0>
<0>오류 내용: ${02[2.600「|| '알 수 없는 오류}</0>

</div>

document.getElementByld(‘result’).innerHTML = resultHtml;


--------------------------------------------------

[페이지 94]
이 코드는 서버 응답 데이터를 기반으로 HTML SASS SACS 생성하고, 이를
DOME] 「6541【요소에 삽입합니다. 각 AMS 시각적으로 구분된 카드 형태로 표시되며,

텍스트 내의 SHS 문자는 HTML <6[>태그로 변환되어 BM) 유지됩니다.

5장 시스템 배포 및 운영

웹 어플리케이션을 개발 후에는 실제 환경에 배포하고 안정적으로 운영하는 것이

중요합니다. 이번장에서는 HSS 주식분석 시스템을 가상화 환경의 Ubuntu HO]
배포하고, 지속적인 운영과 모니터링 방법, 그리고 사용자 패드백을 수집하고 반영하는
방법에 대해 알아보겠습니다.

A. 실제 환경에 배포하기

개발이 완료된 주식 분석 시스템을 사용자들이 이용할 수 있도록 실제 서버환경에
배포하는 과정은 매우 중요합니다. 10043180×를 통한 ubuntu ABP 어플리케이션

배포 방법에 대해 시와 다음과 같은 대화를 UASUCt.

저자: 개발한 주식 분석 시스템을 |[43160* 위에 구축한 464014서버에 배포하는

방법을 알려 주세요

Al: VirtualboxOl] 46000서버를 설치하고 주식 분석 시스템을 배포하는 전체 ase]
다음과 같습니다.

-  \\100048160×설치 및 가상머신 생성

- Ubuntu 설치

- 시스템 업데이트 및 필수 패키지 설치

- Python 및 필요 라이브러리 설치

-  135(어플리케이션 배포를 위한 환경 설정

- '\\501 서버 및 웹서버 설정


--------------------------------------------------

[페이지 95]
- 소스코드 복사 및 의존성 설치                                                      sudo ufw allow 'Nginx HTTPS'

- Hays 설정

sudo ufw allow 'OpenSSH'

- 서비스 구성 및 실행                                                              sudo ufw enable

저자: 위 전체 과정를 상세히 괄러주세요                                              이제 기본적인 서버 환경이 준비되었습니다. 저자의 경우 좀 YY 환경에서 서비스를

운영하고 싶어 시가 SAS 환경보다 좀더 높은 성능으로 할당하였습니다. (메모리 668,
Ak:

i                를 설치하고     설정하는 방법은 다음.    습니다.
VitualboxO] ubuntu AHS 설치하고 기본 설정하는 방법은 다음과 같습니다.                  프로세서(04) 4개로 설정하여 가상머신을 생성하였습니다)
-  https://wwwvirtualbox.org/wiki/Downloads 에서 운영체제에 맞는 버전 다운로드
- 설치 마법사에 따라 설치 진행

- https://ubuntu.com/download/desktop 에서 150파일 다운로드

(저자의 BP ubuntu 24.04.2 LTS 다운로드진행)
- 가상머신생성 및 설정

주식분석 시스      하는 방법을 알아보겠습니다.
- Ubuntu 서버 설치                                                      이제 ubuntu AHO] 주식분석 AAAS 배포하는 방법을 알아보겠습니다

- 서버 기본설정                                                             저자: 이제 ubuntu 서버에 주식분석시스템을 배포하는 방법을 알려주세요

시스템 업데이트                                                               0`4100환경설정과 165 어플리케이션 배포 과정을 자세히 설명해주세요

sudo apt update

sudo apt upgrade -y                                                                    Al: ubuntu 서버에 주식 분석 시스템을 배포하는 WSS 다음과 같습니다.
필수 패키지 설치                                                              - 어플리케이션 코드 전송

sudo apt install -y build-essential python3-pip python3-dev python3-venv nginx                           (저자의 경우 로컬『<에서 복사하기를 통해 AADES 복사한 후, 가상머신의
방화벽 설정                                                                     에디터프로그램(02300, 10등)을 통해 붙여넣어 소스코드를 전송했다)

sudo apt install -y ufw                                                                       - Python 가상환경 설정

sudo ufw allow 'Nginx HTTP’                                                                                     cd ~/stock_analysis


--------------------------------------------------

[페이지 96]
# Python 가상 환경 생성

python3 -m venv venv

# 가상 환경 활성화

source venv/bin/activate

# 의존성 패키지 설치
pip install wheel
pip install -r requirements.txt

pip install gunicorn

#NLTK 데이터 다운로드 (감성 SAO] 필요)

python -m nitk.downloader vader_lexicon

NAVER_CLIENT_ID=your_naver_client_id

NAVER_CLIENT_SECRET=your_naver_client_secret

OPENAI_API_KEY=your_openai_api_key

- System 서비스 설정(서버 재시작 시 자동실행)

- 환경변수 설정
# env 파일 생성

nano .env

# 다음 내용 추가
FLASK_APP=app.py

FLASK_ENV=production

# 서비스 파일 생성

sudo nano /etc/systemd/system/stock-analysis. service

# 다음 내용 추가
[Unit]
Description=Stock Analysis Service

After=network.target

[Service]

User=your_username

Group=www-data

WorkingDirectory=/home/your_username/stock_analysis
Environment="PATH=/home/your_username/stock_analysis/venv/bin"
EnvironmentFile=/home/your_username/stock_analysis/.env
ExecStart=/home/your_username/stock_analysis/venv/bin/gunicorn --workers 3 --bind

unix:stock_analysis.sock -m 007 app:app


--------------------------------------------------

[페이지 97]
[Install]

WantedBy=multi-user.target

# 서비스 시작 및 활성화
sudo systemctl start stock-analysis

sudo systemctl enable stock-analysis

# 상태 확인

sudo systemctl status stock-analysis

- Nginx 웹 서버 설정

#Nginx 설정 파일 생성

sudo nano /etc/nginx/sites-available/stock-analysis

# 다음 내용 추가
server {
listen 80;

server_name server_ip_address; # FE 도메인 이름

location / {

include proxy_params;

08

proxy_pass

http://unix:/home/your_username/stock_analysis/stock_analysis.sock;

}

# 사이트 활성화

sudo In -s /etc/nginx/sites-available/stock-analysis /etc/nginx/sites-enabled

#Nginx 설정 테스트

sudo nginx 그

# Nginx 재시작

sudo systemctl restart nginx

#Nginx 상태 확인

sudo systemctl status nginx

위와 같은 대화를 통해 시스템을 구성해보니 다음 그림과 같이 시스템이 실행되는 것을

수 있었습니다.


--------------------------------------------------

[페이지 98]
주식 분석 시스템

주요 한국 주식 종목코드

005930: 삼성전자 . 000660:5\하이닉스  035420:444타  035720: 카카오
051910:Ｌ6화학  207940:삼성바이오로직스 . 006400:삼성50!  068270:셀트리온

000270: 기아 — 005380: 헌대차

종목 코드:

Of: 005930 (삼성전자)

회사 이름 (선택사항):

예:삼성전자

| 본 서비스는 네이버 검색 APIS 활용하여 최신 뉴스 정보를 수집합니다.

© 2025 kerberus’s Al support 주식 분석 시스템 - 재무 데이터 및 뉴스 기반 주식 분석 서비스

그림 2 주식분석 시스템 메인 화면

주식 분석 시스템

주요 한국 주식 종목코드

005930: 삼성전자 000660: 5\하이닉스 . 035420:444타:  035720: 카카오
051910:Ｌㄴ6화학  207940:삼성바이오로직스 . 006400:삼성50  068270: 셀트리온

000270: 기아  005380: 현대차

종목 코드:

068270

회사 이름 (선택사항):
셀트리온

셀트리온 (068270) 분석 결과

최신 뉴스 헤드라인

* 관세? AAS RR. MEAS, 바이오 본업 성장 계속된다 (2025-04-26 10:32)

* [주식] 코스피, 2546선에서 강보합마감…현대중공업 컨센서스 상회에 강.… (2025-04-26 00:14)
*110현대중공업 시총 8위 우뚝...주가 향방은?(2025-04-27 09:42)

* 연이어 나스닥 두드리는 \바이오...기회인가 리스크인가 (2025-04-26 05:33)

* 코스피, FAA 우려 완화에 2천540선 회복...11거래일 만에 외국인 “Apt... (2025-04-25 18:02)

그림 3 주식분석 시스템 분석 결과


--------------------------------------------------

[페이지 99]
뉴스 요약

셀트리온은 바이오 본업의 성장을 지속하고 있습니다. 불구하고 미국의 관세 문제에도 불구하고 실적은 꾸준히
성장하고 있음을 보여주고 있습니다. 또한, 코스피에서도 강보합을 유지하며 안정적인 성과를 보이고 있습니다.
이러한 동향은 셀트리온이 지속적으로 성장하고 있는 바이오산업의 중요한 플레이어임을 재확인시켜줍니다.

감성 분석

1. 전반적 감성: 긍정

2. 감성 분석 근거: 뉴스에서는 셀트리온의 바이오 본업 성장, 미국의 관세 문제에도 불구하고 꾸준한 실적 성장,
코스피에서의 안정적인 성과 등 긍정적인 요소들이 주를 이룹니다. 이는 셀트리온이 지속적으로 성장하고 있는

바이오산업의 중요한 플레이어임을 재확인시켜주는 내용입니다.

3. 예상 주가 영향: 상승 전망. 셀트리온의 성장세와 안정적인 성과, 그리고 바이오산업에서의 중요한 위치를 고

려하면 주가 상승을 예상할 수 있습니다.

그림 4 주식분석 시스템 분석 결과2

## 재무 지표 분석

1. 수익성 지표:

- 순이익률: 11.882% (산업 평균: 12.5%)

-ㅠ06(자기자본수익률): 2.414% (산업 평균: 15.8%)

2. 안정성 지표:
- 유동비율: 1.752 (산업 평균: 2.2)
- 부채비율: 12.473% (산업 평균: 32.0%)

3. 가치 지표:
-『ㅁ/6(주가수익비율): 15.2 (산업 평균: 28.3)
- 배당수익률: 45.0%

4. 시장 지표:
-시가총액: 34,528,078,856,192 원
- 52주 최고/최저 대비 현재가: 현재가가 최고가의 78.8%, 최저가의 103.7%

#산업내위치

- 산업 내 재무 건전성 순위: 중위

- 주요 경쟁사 대비 특징: 주가수익비율이 경쟁사보다 낮아 상대적으로 저평가된 상태이며, 배당수익률이 높아
투자자에게 배당으로의 수익 기대가 큼.

Ht 뉴스 및 감성 분석과의 연관성

- 최근 뉴스가 재무 상태에 미치는 영향: 바이오 본업 성장, 미국의 관세 문제에도 불구하고 꾸준한 실적 성장 등
금정적인 뉴스가 재무 상태를 개선하는데 기여하였을 것으로 보임.

- 뉴스 감성과 투자 관점의 연관성: 긍정적인 뉴스 감성은 투자자들의 투자 의사결정에 긍정적인 영향을 미칠 것
으로 예상됨.

## 투자 시사점

- 단기 관점 (3개월): 현재 주가가 52주 최고가 대비 낮은 수준이므로, 단기적으로 주가 상승 기대

- 중장기 관점 (6개월 이상): 안정적인 성과와 높은 배당수익률, 그리고 바이오산업에서의 중요한 위치 등을 고려
하면 중장기적으로도 주가 상승을 기대할 수 있음.

## 종합 평가
- 재무 건전성: 6 (정량적 지표 기반)
- 투자 매력도: 상 (정량적 지표 기반)

셀트리온은 안정적인 성과와 높은 배당수익률, 그리고 바이오산업에서의 중요한 위치 등을 갖추고 있어 투자 매
력도가 높다고 판단됩니다. 그러나 ㅁ06와 유동비율 등 일부 지표에서 산업 평균보다 낮은 수치를 보이고 있어
재무 건전성은 B 등급으로 평가됩니다.

그림 5 주식분석시스템 분석 결과3


--------------------------------------------------

[페이지 100]
6장 글을 마무리하며
이제 Al 496마를 활용한 주식분석시스템 구죽의 여정을 함께 마무리 지었습니다.
비개발자로서 시와의 BAS 통해 프로그래밍 한다는 것은 분명 도전적인 일이었을
것입니다. 하지만 이 HS 통해 자신만의 주식분석도구를 갖게 되었고, 그 과정에서 시와
데이터분석, 웹개발의 기초까지 습득했습니다.

우리는 이 과정을 통해 다음과 같은 내용을 습득했습니다.

- Al Agent2} LangChain2| 기본 개념을 이해하고 실전에 적용하는 방법을
배웠습니다.

- 외부 APS 활용해 실시간 주식 데이터와 FAS 수집하는 시스템을 구축했습니다.

- 뉴스 텍스트에서 감성을 분석하고, 재무 데이터를 해석하는 시모델을
구현했습니다.

- FlakS 통해 직관적인 웹 인터페이스를 개발하여 분석결과를 시각적으로
표현했습니다.

- 이 모든 과정을 시와 함께 협업하며 프롬프트 엔지니어링에 한걸음 다가갔습니다.

이 주식분석시스템은 앞으로 더 많은 가능성을 품고 있습니다. 특정 산업이나 새로운

투자 전략에 맞게 Al 49601에게 SB 부여하고 분석 SAS 조정할 수 있습니다. 또
다양한 AHS 통해 시계열 예측이나 포트폴리오 최적화 같은 고급 기능을 추가할 수

있습니다. 이 외에도 소셜미디어, DART SASH 추가 등 다양한 데이터 AAS 연결하여

조금 더 사용자에게 선택권을 줄 수 있게 HSS 가능합니다.

마지막으로 증권사 APIS OSHA 이러한 정보들을 기반으로 FAS 매매, 매도하는

기능을 추가하여 연동도 가능합니다.

이 책에서 배운 내용은 이제 시작에 불과합니다. 시를 이용한 협업은 앞으로도 모든
산업의 전반적으로 넓혀나가게 될것이며, Al AgentS 이용한 새로운 산업의 패러다임이
변화하고 있습니다. 앞으로는 주식분석시스템처럼 뉴스를 FUE agent, 분석하는
Agent, 재무데이터 분석하는 4901와 같이 인간이 하는 반복적인 업무에 대해 다양한
또는 수많은 agent SS 부여하여 대신할 수 있도록 변화할 것입니다.

그 큰 변화의 물결에 함께 하기 위해 이 책이 작은 밑거름이 되었기를 바랍니다.
앞으로도 끊임없이 호기심을 갖고, 배움을 멈추지 않길 바라며 새로운 길의 행운을
eIUCt.


--------------------------------------------------
